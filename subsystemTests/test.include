#!/bin/sh

# Shell function for checking if the number of lines of output matches
# the expected number.

check_num_output_lines()
{
    # Parameter 1 is the command line.
    # Parameter 2 is the error message if command returns nonzero.
    # Parameter 3 is the number of expected output lines.
    # If anything fails, exit the script with the right error code.

    TMPFILE=`mktemp /tmp/tmp.XXXXXXXXXX` || \
        check_errs $? "$0 could not create temp file"

    CMDLINE=${1}		# re-wordsplit on whitespace
    $CMDLINE | tee $TMPFILE || check_errs $? "$0 ${2}"

    NUMLINES=$(cat $TMPFILE | wc -l)
    rm $TMPFILE
    [ $NUMLINES -eq "${3}" ] || \
        check_errs $? "$0 incorrect output: $NUMLINES lines (expected ${3})"

    return 0
}

run_bg () {
    LOG="$1"
    shift

    # XXX: backwards compatability
    if test "x$VALGRIND" = x1; then
        CHECKTOOL=valgrind
    fi

    case "$CHECKTOOL" in
        valgrind)
            if test "x$STRICT_CHECKS" = x1; then
                valgrind --log-file="valgrind.$TEST_LOG_NAME.$LOG.log" --track-fds=full --leak-check=full --error-exitcode=1 "$@" &
            else
                valgrind --log-file="valgrind.$TEST_LOG_NAME.$LOG.log" --error-exitcode=1 "$@" &
            fi
            ;;
        )
            "$@" &
            ;;
        *)
            echo >&2 "Error: invalid value for \$CHECKTOOL: $CHECKTOOL"
            exit 1
    esac
}

run () {
    run_bg "$@"
    wait $!
}
