# This file serves as a model of how to specify which ROAs to keep and
#      which to reject based on different ways of not being perfect
# Note that any that have never been validated at some point with a trust
#      chain to a trust anchor are automatically eliminated (unless the
#      user specifies the -i switch on the query command line)
# "yes" means to accept the ROA anyway, and "no" means to reject it
#      default is yes

# If a ROA at one point had a trust chain back to a trust anchor
#   validating it, but then later lost this trust chain due to a
#   certificate expiring or being revoked by a CRL, then the ROA is
#   in a validation stale state.
#   Specifying no means that all such ROAs are eliminated from the output,
#   while yes treats all such ROAs as equivalent to valid ROAs.
StaleValidationChain no

# If a ROA or any certificate on its trust chain has never been on a
#   valid manifest, then there is reason to consider the ROA suspect.
#   Specifying no means that all such ROAs are eliminated from the output,
#   while yes treats all such ROAs as equivalent to valid ROAs.
NoManifest yes

# If a CRL is stale, i.e. the current time is past its next update time,
#   and a more recent replacement CRL has not arrived, then all the
#   certificates in the scope of this CRL and their descendants are suspect.
#   Specifying no eliminates all such objects, while yes allows them
#   into the output (essentially ignoring this type of staleness).
StaleCRL yes

# In the same way that a CRL can be stale, so can a manifest, which makes
#   all the certificates in its scope and their descendants stale.
#   Specifying no eliminates all such objects, while yes allows them
#   into the output (essentially ignoring this type of staleness).
StaleManifest yes

# Certificate can be added that have not yet become valid. Yes includes
#   these certificates, no excludes them.
NotYet no
