#!/bin/sh

# cron runs this script once every X time period to collect statistics
# from the global RPKI

@SETUP_ENVIRONMENT@

TMP=`getopt -o hf -l help,fresh -n "$0" -- "$@"` || exit $?
eval set -- "$TMP"
FRESH=
while true; do
    case "$1" in
        -h | --help)
            echo >&2 "This script can be used to collect data on"
            echo >&2 "the global RPKI. This is probably only useful to people who want"
            echo >&2 "to monitor the RPKI, not to people who just want their routers"
            echo >&2 "to work."
            echo >&2 ""
            echo >&2 "This script should be run periodically from Cron. See"
            echo >&2 "@PACKAGE_NAME@-plot-statistics to analyze the results of this"
            echo >&2 "script."
            echo >&2 ""
            echo >&2 "Use the --fresh option to start fresh each time instead of"
            echo >&2 "incrementally updating."
            exit 0
            ;;

        -f | --fresh)
            FRESH=yes
            ;;
    esac
done

setup_statistics_environment

STATS_DIR="`config_get RPKIStatisticsDir`"


LOCK_FILE="$STATS_DIR/tmp/collect.lock"
if test -n "$FRESH"; then
    WORK_DIR="$STATS_DIR/tmp/work-`date +%s`-`hostname`-$$"
else
    WORK_DIR="$STATS_DIR/tmp/work-incremental"
fi

# For use in statistics-internal.conf
export @PACKAGE_NAME_UC@_STATISTICS_COLLECTION_DIR="$WORK_DIR"


# Whether the run should go in the bad/ or good/ directory above.
RESULT=good

START_TIME=""
END_TIME=""


formatted_date () {
    date -u +"%Y-%m-%dT%H:%M:%S"
}

# This function must only be called when the mutex is locked and $WORK_DIR
# exists.
cleanup () {
    failed=""

    test -n "$START_TIME" || START_TIME="`formatted_date`"
    test -n "$END_TIME" || END_TIME="`formatted_date`"
    NAME="${START_TIME}~${END_TIME}"

    if test -n "$FRESH"; then
        RENAME="mv"
    else
        RENAME="cp -a"
    fi

    # Compress $WORK_DIR to $STATS_DIR/$RESULT/$NAME.tgz.
    if $RENAME "$WORK_DIR" "$STATS_DIR/tmp/$NAME" && \
        tar -cpzf "$STATS_DIR/$RESULT/$NAME.tgz" -C "$STATS_DIR/tmp" "$NAME"
    then
        rm -rf "$STATS_DIR/tmp/$NAME" || {
            error "could not remove temporary directory $STATS_DIR/tmp/$NAME"
            failed=true
        }
    else
        error "could not make $STATS_DIR/$RESULT/$NAME.tgz"
        failed=true
    fi

    mutex_unlock "$LOCK_FILE"

    # Only modify the return code if this function failed.
    test -n "$failed" && exit 1
}


# Set up the conditions required to run cleanup(), then trap cleanup().
mutex_trylock "$LOCK_FILE" || exit 1 # mutex_trylock prints its own error message
mkdir -p "$WORK_DIR" || {
    mutex_unlock "$LOCK_FILE"
    fatal "could not create work directory $WORK_DIR"
}
trap cleanup 0


# By this point, the mutex is locked, $WORK_DIR exists, and cleanup() is
# trapped, so fatal() can record info in $WORK_DIR and modify the behavior of
# cleanup() by setting $RESULT.
fatal () {
    error "$@"
    error "$@" > "$WORK_DIR/error" 2>&1
    RESULT=bad
    exit 1
}


if test -z "$FRESH"; then
    # remove everything from the workdir except for the repository
    find "$WORK_DIR" -mindepth 1 -maxdepth 1 -not -name REPOSITORY \
        -exec rm -rf '{}' +
    mkdir "$WORK_DIR/LOGS"
fi


hostname > "$WORK_DIR/hostname" \
    || fatal "could not record hostname"

echo "@PACKAGE_VERSION_FULL@" > "$WORK_DIR/version" \
    || fatal "could not record software version"


if test -n "$FRESH"; then
    initialize -f > "$WORK_DIR/initialize.log" 2>&1 \
        || fatal "failed to initialize database"
fi

START_TIME="`formatted_date`"
synchronize > "$WORK_DIR/synchronize.log" 2>&1 \
    || fatal "error syncing with repositories"
END_TIME="`formatted_date`"


query -t cert -d pathname -d valfrom -d valto -d flags -i \
    > "$WORK_DIR/query.cer" \
    || fatal "could not query certificates"

query -t crl -d pathname -d last_upd -d next_upd -d flags -i \
    > "$WORK_DIR/query.crl" \
    || fatal "could not query CRLs"

query -t gbr -d pathname -d flags -i \
    > "$WORK_DIR/query.gbr" \
    || fatal "could not query GBRs"

query -t roa -d pathname -d flags -i \
    > "$WORK_DIR/query.roa" \
    || fatal "could not query ROAs"

query -t manifest -d pathname -d this_upd -d next_upd -d flags -i \
    > "$WORK_DIR/query.mft" \
    || fatal "could not query manifests"

results > "$WORK_DIR/results" \
    || fatal "could not run results"

results -v > "$WORK_DIR/results.verbose" \
    || fatal "could not run results (verbose)"
