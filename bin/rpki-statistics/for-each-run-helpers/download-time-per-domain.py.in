#!@PYTHON@

import collections
import datetime
import os
import re
import sys


"""
Compute the amount of linear time spend trying to download from each domain.
"""


def log_line_match_to_datetime(match):
    year, day, hour, minute, second = [int(x) for x in match.group(
        'year', 'day', 'hour', 'minute', 'second')]
    month = [
        'Jan',
        'Feb',
        'Mar',
        'Apr',
        'May',
        'Jun',
        'Jul',
        'Aug',
        'Sep',
        'Oct',
        'Nov',
        'Dec',
    ].index(match.group('month')) + 1
    return datetime.datetime(year, month, day, hour, minute, second)


if __name__ == '__main__':
    log_re = re.compile('^rsync_cord\\.log(?:\\.[0-9]+)?$')

    # beginning of each log line
    log_header_re_text_X = """
        ^
        (?P<day>[0-9]{2}) - (?P<month>[A-Za-z]+) - (?P<year>[0-9]{4}) -
        (?P<hour>[0-9]{2}) : (?P<minute>[0-9]{2}) : (?P<second>[0-9]{2})[ ]+
        (?P<level>[A-Z]+) [ ]+
        Thread: [ ] (?P<thread>[0-9]+) : [ ]+
        """

    log_uri_starting = re.compile(
        log_header_re_text_X +
        """
        starting [ ]
        (?P<host>[^/]+) /
        (?P<path>.*)
        $
        """,
        re.VERBOSE)

    log_uri_done = re.compile(
        log_header_re_text_X +
        """
        [^ ]+ [ ]
        had [ ] return [ ] code [ ]
        (?P<return_code>-?[0-9]+)
        $
        """,
        re.VERBOSE)

    # map of thread id to (datetime, host)
    thread_started = {}

    # maps of host to time spent in seconds
    time_per_host_success = collections.defaultdict(lambda: 0.0)
    time_per_host_failure = collections.defaultdict(lambda: 0.0)

    for log_name in os.listdir('LOGS'):
        if '\n' in log_name or log_re.match(log_name) is None:
            continue

        with open(os.path.join('LOGS', log_name)) as log_file:
            for log_line in log_file:
                starting_match = log_uri_starting.match(log_line)
                if starting_match is not None:
                    thread = starting_match.group('thread')
                    if thread in thread_started:
                        sys.exit("thread %s already started" % thread)
                    thread_started[thread] = (
                        log_line_match_to_datetime(starting_match),
                        starting_match.group('host'))

                done_match = log_uri_done.match(log_line)
                if done_match is not None:
                    thread = done_match.group('thread')
                    if thread not in thread_started:
                        sys.exit("thread %s not started" % thread)
                    duration = (log_line_match_to_datetime(done_match) -
                                thread_started[thread][0]).total_seconds()
                    if int(done_match.group('return_code')) == 0:
                        time_per_host_success[thread_started[thread][1]] += duration
                    else:
                        time_per_host_failure[thread_started[thread][1]] += duration
                    del thread_started[thread]

        if thread_started:
            sys.exit("not all threads ended before the end of the log file %s"
                % os.path.join('LOGS', log_name))

    print "host\tseconds spent on successful transfers\tseconds spent on failed transfers"
    hosts = set()
    hosts.update(time_per_host_success.iterkeys())
    hosts.update(time_per_host_failure.iterkeys())
    for host in sorted(hosts):
        print "%s\t%s\t%s" % (host, time_per_host_success[host], time_per_host_failure[host])
