#!@SHELL_BASH@ -e
#


# set environment variables if not set
THIS_SCRIPT_DIR=`dirname "$0"`
. $THIS_SCRIPT_DIR/../envir.setup

CHASER="$RPKI_ROOT/proto/chaser"
CHASER_LOG="$RPKI_ROOT/chaser.log"
RSYNC_CORD_CONF="$RPKI_ROOT/rsync_cord.config"
BAD_URI_CHARS='['\''",;&(){}|<>!$`\\[:space:][:cntrl:]]\|\[\|\]'

touch "$CHASER_LOG"

OLD_LIST="`@MKTEMP@`"
CUR_LIST="`@MKTEMP@`"

$CHASER "$@" > "$CUR_LIST"

log () {
	echo "`date`" "$@" >> "$CHASER_LOG"
	echo "$@" >&2
}

# Check for the latest version.
if test "$RPKI_NEW_VERSION_CHECK" != none; then
	VERSION_FILE="`@MKTEMP@`"
	if curl \
		--cacert "$RPKI_ROOT/version-server.pem" \
		--connect-timeout 60 \
		--location \
		--max-time 30 \
		--output "$VERSION_FILE" \
		"$RPKI_NEW_VERSION_CHECK"
	then
		LATEST_VERSION="$(head -n 1 "$VERSION_FILE")"
		if test "@PACKAGE_VERSION@" != "$LATEST_VERSION"; then
			log "A new version, $LATEST_VERSION, of @PACKAGE_NAME@ is available."
		fi
	else
		log "Can't download version information from $RPKI_NEW_VERSION_CHECK"
	fi
	rm "$VERSION_FILE"
fi

while ! cmp -s "$OLD_LIST" "$CUR_LIST"; do
	rm -f "$RSYNC_CORD_CONF"

	echo "RSYNC=\"`which rsync`\"" >> "$RSYNC_CORD_CONF"
	echo "REPOSITORY=\"$RPKI_ROOT/REPOSITORY\"" >> "$RSYNC_CORD_CONF"
	echo "LOGS=\"$RPKI_ROOT/LOGS\"" >> "$RSYNC_CORD_CONF"

	DONE_URI=0
	printf "DIRS=\"" >> "$RSYNC_CORD_CONF"
	while read -r -d "" URI; do
		if printf "%s" "$URI" | grep -q "$BAD_URI_CHARS"; then
			log "Discarding URI: $URI"
		elif test -n "$URI"; then
			if test $DONE_URI -eq 0; then
				DONE_URI=1
			else
				printf " " >> "$RSYNC_CORD_CONF"
			fi
			printf "%s" "$URI" | sed 's!^rsync://!!i' | sed 's!/$!!' >> "$RSYNC_CORD_CONF"
		fi
	done < "$CUR_LIST"
	echo "\"" >> "$RSYNC_CORD_CONF"

	"$RPKI_ROOT"/rsync_aur/rsync_cord.py -d -c "$RSYNC_CORD_CONF" -t "$RPKI_TCOUNT"

	rm -f "$OLD_LIST"
	OLD_LIST="$CUR_LIST"
	CUR_LIST="`@MKTEMP@`"
	$CHASER "$@" > "$CUR_LIST"
done

rm -f "$OLD_LIST" "$CUR_LIST"
