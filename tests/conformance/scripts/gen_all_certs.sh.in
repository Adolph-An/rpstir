#!@SHELL_BASH@
#

# gen_all_certs.sh - create all certificates for RPKI syntax
#                    conformance test

@SETUP_ENVIRONMENT@

# Safe bash shell scripting practices
@trap_errors@

CONFORMANCE_ROOT_BUILDDIR="$TESTS_TOP_BUILDDIR/tests/conformance"
CONFORMANCE_ROOT_SRCDIR="$TESTS_TOP_SRCDIR/tests/conformance"

# Usage
usage ( ) {
    usagestr="
Usage: $0 [options]

Options:
  -P        \tApply patches instead of prompting user to edit (default = false)
  -h        \tDisplay this help file

This script creates a large number of certificates, and for each one
prompts the user multiple times to interactively edit (e.g., in order
to introduce errors), and captures those edits in '.patch' files
(output of diff -u).  Later, running $0 with the -P option can replay
the creation process by automatically applying those patch files
instead of prompting for user intervention.

This tool assumes the repository structure in the diagram below.  It
creates a ton of certificates in the position of the certificate
labeled 'Child'.  In the Child's SIA, the accessMethod
id-ad-rpkiManifest will have an accessLocation of
rsync://rpki.bbn.com/conformance/root/empty/doesNotExist.mft, and that
manifest will be intentionally omitted from the directory named
'empty'.  This allows us to reuse the same empty directory as the SIA
for the large number of certificates that we will generate using this
script.


               +-----------------------------------+
               | rsync://rpki.bbn.com/conformance/ |
               |     +--------+                    |
         +---------->|  Root  |                    |
         |     |     |  cert  |                    |
         |  +---------- SIA   |                    |
         |  |  |     +--------+                    |
         |  |  +-----------------------------------+
         |  |
         |  |
         |  |  +----------------------------------------+
         |  |  | rsync://rpki.bbn.com/conformance/root/ |
         |  +->|   +--------+     +------------+        |
         |     |   | *Child |     | CRL issued |        |
         |     |   | CRLDP------->| by Root    |        |
         +----------- AIA   |     | root.crl   |        |
               |   |  SIA------+  +------------+        |
               |   +--------+  |  +-----------------+   |
               |               |  | Manifest issued |   |
               |               |  | by Root         |   |
               | Root's Repo   |  | root.mft        |   |
               | Directory     |  +-----------------+   |
               +---------------|------------------------+
                               |
                               V
               +----------------------------------------------+
               | rsync://rpki.bbn.com/conformance/root/empty/ |
               |                                              |
               | Empty Directory (MFT intentionally omitted)  |
               +----------------------------------------------+

Inputs:
  -P - (optional) use patch mode for automatic insertion of errors

Outputs:
  child CA certificates - AS/IP is hardcoded in goodCert.raw template
  patch files - manual edits are saved as diff output in
                'badCert<filestem>.stageN.patch' (N=0..1) in the patch
                directory
    "
    printf "${usagestr}\n"
    exit 1
}

# NOTES

# 1. Variable naming convention -- preset constants and command line
# arguments are in ALL_CAPS.  Derived/computed values are in
# lower_case.

# 2. Assumes write-access to current directory even though the output
# directory will be different.


# Options and defaults
OUTPUT_DIR="$CONFORMANCE_ROOT_BUILDDIR/raw/root"
USE_EXISTING_PATCHES=

# Process command line arguments.
while getopts Ph opt
do
  case $opt in
      P)
	  USE_EXISTING_PATCHES=1
	  ;;
      h)
	  usage
	  ;;
  esac
done
shift $((OPTIND - 1))
if [ $# != "0" ]
then
    usage
fi

###############################################################################
# Computed Variables
###############################################################################

if [ $USE_EXISTING_PATCHES ]
then
    patch_option="-P"
else
    patch_option=
fi

single_cert_script="$CONFORMANCE_ROOT_BUILDDIR/scripts/make_test_cert.sh"
single_cert_cmd="${single_cert_script} ${patch_option} -o ${OUTPUT_DIR}"

###############################################################################
# Check for prerequisite tools and files
###############################################################################

ensure_file_exists ( ) {
    if [ ! -e "$1" ]
    then
	echo "Error: file not found - $1" 1>&2
	exit 1
    fi
}

ensure_dir_exists ( ) {
    if [ ! -d "$1" ]
    then
	echo "Error: directory not found - $1" 1>&2
	exit 1
    fi
}

ensure_dir_exists "$OUTPUT_DIR"
ensure_file_exists "${single_cert_script}"

###############################################################################
# Generate Child certificates
###############################################################################

${single_cert_cmd} -x good 101 aia2accessdeschtrs
${single_cert_cmd} 102 aiabadaccess
${single_cert_cmd} 103 aiaaccessloc
${single_cert_cmd} 104 aiacrit
${single_cert_cmd} 105 akihash
${single_cert_cmd} 106 akishort
${single_cert_cmd} 107 unkextension
${single_cert_cmd} 109 basicconstrnoca
${single_cert_cmd} 110 basicconstrnocrit
${single_cert_cmd} 111 basicconstrpathlth
${single_cert_cmd} 112 cpol2oid1correct
${single_cert_cmd} 113 cpolnocrit
${single_cert_cmd} -x good 114 crldp2distpt
${single_cert_cmd} 115 crldpcrit
${single_cert_cmd} 116 crldpcrlissuer
${single_cert_cmd} 118 crldpreasons
${single_cert_cmd} 119 eku
${single_cert_cmd} 120 innersigalg
${single_cert_cmd} 121 issueroid
${single_cert_cmd} 122 issuer2comname
${single_cert_cmd} 123 issuerutf
${single_cert_cmd} 124 issuer2setcomname
${single_cert_cmd} 125 issuersernum
${single_cert_cmd} 126 issuid
${single_cert_cmd} 127 kusageextra
${single_cert_cmd} 128 kusagenocertsign
${single_cert_cmd} 129 kusagenocrit
${single_cert_cmd} 131 kusagenocrlsign
${single_cert_cmd} 134 outersigalg
${single_cert_cmd} 135 pubkeyalg
${single_cert_cmd} 136 pubkeyexp
${single_cert_cmd} 137 pubkeyshort
${single_cert_cmd} 138 resourcesasnocrit
${single_cert_cmd} 139 resourcesbadafi
${single_cert_cmd} 140 resourcesbadasorder
${single_cert_cmd} 141 resourcesbadv4order
${single_cert_cmd} 142 resourcesbadv6order
${single_cert_cmd} 143 resourcesipnocrit
${single_cert_cmd} 144 resourcesnone
${single_cert_cmd} 145 resourcessafi
${single_cert_cmd} 147 siareponorsync
${single_cert_cmd} 148 siaaccessmethod
${single_cert_cmd} 150 skihash
${single_cert_cmd} 151 skilong
${single_cert_cmd} 194 skishort
${single_cert_cmd} 152 subjectoid
${single_cert_cmd} 153 subject2comname
${single_cert_cmd} 154 subjectutf
${single_cert_cmd} 155 subject2setcomname
${single_cert_cmd} 156 subjectsernum
${single_cert_cmd} 157 subjuid
${single_cert_cmd} 158 valcrossed
${single_cert_cmd} 159 valfromfuture
${single_cert_cmd} 160 valfromtyp
${single_cert_cmd} 162 valtopast
${single_cert_cmd} 163 valtotyp
${single_cert_cmd} 164 versionneg
${single_cert_cmd} 165 version1
${single_cert_cmd} 166 version2
${single_cert_cmd} 167 version4
${single_cert_cmd} 168 sernum
${single_cert_cmd} 169 aia2x
${single_cert_cmd} 170 sia2x
${single_cert_cmd} 171 noaia
${single_cert_cmd} 172 nosia
${single_cert_cmd} 173 nobasicconstr
${single_cert_cmd} 174 2basicconstr
${single_cert_cmd} 175 noski
${single_cert_cmd} 176 2ski
${single_cert_cmd} 177 noaki
${single_cert_cmd} 178 2aki
${single_cert_cmd} 179 nokeyusage
${single_cert_cmd} 180 2keyusage
${single_cert_cmd} 181 2crldp
${single_cert_cmd} 182 nocrldp
${single_cert_cmd} 183 nocpol
${single_cert_cmd} 184 2cpol
${single_cert_cmd} 185 2ipaddr
${single_cert_cmd} 186 2asnum
${single_cert_cmd} 187 crldpnorsyncdistpt
${single_cert_cmd} 188 issuerset2sernums
${single_cert_cmd} 189 subjectset2sernums
${single_cert_cmd} -x good 190 sernummax
${single_cert_cmd} 191 sernumtoobig
${single_cert_cmd} 192 resourcesipempty
${single_cert_cmd} 193 ResourcesASEmpty
