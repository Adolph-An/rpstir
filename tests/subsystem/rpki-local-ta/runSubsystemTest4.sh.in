#!@SHELL_BASH@
#

# Usage: ./runSubsystemTest.sh <testID> <numsteps>
#
# This script runs a subsystem test by clearing the database, starting
# a loader, and then successively running the scripts ./stepN.M where
# N=<testID> and M ranges from 1..<numsteps>.  It exits with return
# code 0 if successful, nonzero otherwise.

if [ "$#" -ne "0" ]; then
    echo "Usage: $0 <testID> <numsteps>"
    echo
    echo "This script runs a subsystem test by clearing the database, starting"
    echo "a loader, and then successively running the scripts ./stepN.M where"
    echo "N=<testID> and M ranges from 1..<numsteps>.  It exits with return"
    echo "code 0 if successful, nonzero otherwise."
    exit 1
fi

# for the run and run_bg functions
export TEST_LOG_NAME=subsys4

@SETUP_ENVIRONMENT@

@trap_errors@

cd "$TESTS_BUILDDIR"

# refresh test certs
for f in "$TESTS_SRCDIR/testcases4_LTA/"C?*.raw; do
    filename=`basename "$f" .raw`
    rr < "$f" > "$TESTS_BUILDDIR/testcases4_LTA/${filename}.cer"
done
run "update_cert" update_cert 0D 2Y testcases4_LTA/C?*.cer

# check for existing loader and fail if so
if nc -z localhost `config_get RPKIPort`; then
    echo "ERROR: port `config_get RPKIPort` is already in use.  Aborting subsystem test."
    exit 3
fi

NUM_PASSED=0 
N=1
while [ $N -le "4" ]; do
# clear database
    ./initDB4 || check_errs $? "initDB failed!"
    run_bg "rcli-w-$N" rcli -w
    LOADER_PID=$!
     echo "Loader started for case ${N}"
     sleep 10
     failures=""
     ./step4 || failures="$failures step4"
     wait "$LOADER_PID" || failures="$failures rcli-w"
     run "rcli-c-$N" rcli -c testcases4_LTA/LTA/case${N} || failures="$failures rcli-c"
     cd testcases4_LTA/LTA 
     run "checkLTAtest-$N" ../../checkLTAtest case${N} C*.cer || failures="$failures checkLTAtest"
     cd ../../
    if [ -z "$failures" ]; then
	NUM_PASSED=$(( $NUM_PASSED + 1 ))
    else
        echo "Failed: $failures"
    fi
    N=$(( $N + 1 ))
done

 
# display results
if [ "$NUM_PASSED" -eq "4" ]; then
    TEST_STATUS="PASS"
else
    TEST_STATUS="FAIL"
fi
echo "-------------------------------------------------------------------"
echo "Subsystem Test $TESTID: $NUM_PASSED out of 4 steps passed."
echo "Subsystem Test $TESTID: $TEST_STATUS"
echo "-------------------------------------------------------------------"

# exit with nonzero if test failed
if [ "$TEST_STATUS" != "PASS" ]; then
    exit 2
fi
