#!@SHELL_BASH@
#

# Usage: ./runSubsystemTest.sh <testID> <numsteps>
#
# This script runs a subsystem test by clearing the database, starting
# a loader, and then successively running the scripts ./stepN.M where
# N=<testID> and M ranges from 1..<numsteps>.  It exits with return
# code 0 if successful, nonzero otherwise.

if [ "$#" -ne "2" ]; then
    echo "Usage: $0 <testID> <numsteps>"
    echo
    echo "This script runs a subsystem test by clearing the database, starting"
    echo "a loader, and then successively running the scripts ./stepN.M where"
    echo "N=<testID> and M ranges from 1..<numsteps>.  It exits with return"
    echo "code 0 if successful, nonzero otherwise."
    exit 1
fi

TESTID=$1
NUM_STEPS=$2

@SETUP_ENVIRONMENT@

@trap_errors@

# for the run and run_bg functions
export TEST_LOG_NAME="subsys$TESTID"

cd "$TESTS_BUILDDIR"

# clear database
./initDB || check_errs $? "initDB failed!"

# check for existing loader and fail if so
port=$(config_get RPKIPort) || fatal "unable to get RPKIPort"
if port_open "${port}"; then
    echo "ERROR: port ${port} is already in use.  Aborting subsystem test."
    exit 3
fi

unset LOADER_PID
kill_loader() {
    [ -n "${LOADER_PID+set}" ] || return 0
    kill "${LOADER_PID}"
    # TODO: make rcli close cleanly so its return value can be checked
    # reliably
    wait "${LOADER_PID}" || true
    ret=$?
    unset LOADER_PID
    return "${ret}"
}
trap 'exit 1' HUP INT TERM
trap 'kill_loader' EXIT

# start loader
run_bg "rcli-w" rcli -w -p
LOADER_PID=$!
timeout=15
while ! port_open "${port}"; do
    [ "${timeout}" -gt 0 ] || fatal "timed out waiting for rcli to start"
    sleep 1
    timeout=$((timeout-1))
done
echo "Loader started (pid = $LOADER_PID)..."

# run all steps
NUM_PASSED=0
NUM_TOTAL=$NUM_STEPS

N=1
while [ $N -le $NUM_TOTAL ]; do
    if ./step${TESTID}.${N}; then
	NUM_PASSED=$(( $NUM_PASSED + 1 ))
    fi
    N=$(( $N + 1 ))
done

kill_loader || fatal "rcli exited with non-0 status"

# echo Socket state from netstat
# netstat -ant | grep `config_get RPKIPort`

# display results
if [ "$NUM_PASSED" -eq "$NUM_TOTAL" ]; then
    TEST_STATUS="PASS"
else
    TEST_STATUS="FAIL"
fi
echo "-------------------------------------------------------------------"
echo "Subsystem Test $TESTID: $NUM_PASSED out of $NUM_TOTAL steps passed."
echo "Subsystem Test $TESTID: $TEST_STATUS"
echo "-------------------------------------------------------------------"
sleep 2
# exit with nonzero if test failed
if [ "$TEST_STATUS" != "PASS" ]; then
    exit 2
fi
