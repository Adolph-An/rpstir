#!/bin/sh

# This scenario has the following object hierarchy:
#
#                   TA
#                    |
#           +--------+-------+
#           |                |
#       VictimCA          EvilCA
#           |                |
#      VictimChild     FakeVictimCA
#                            |
#                      FakeVictimCRL
#
# All objects are valid.  The FakeVictimCA cert has the same Subject
# as the VictimCA cert.  The CRL issued by FakeVictimCA lists the
# serial number of the VictimChild certificate.  The goal of this test
# is to see whether RPs treat VictimChild as revoked.
#
# Because file add order affects which code paths are exercised (e.g.,
# cert before CRL vs. CRL before cert), this test script tries all of
# the interesting sequences.

@SETUP_ENVIRONMENT@

t4s_setup

u=${TESTS_TOP_SRCDIR}/tests/util.sh
. "${u}" || t4s_bailout "unable to load ${u}"
pecho() { printf %s\\n "$*"; }

cd "${TESTS_BUILDDIR}" || t4s_bailout "unable to cd to ${TESTS_BUILDDIR}"

event_A() { printf %s\\n ta.cer ca-victimchild.cer; }
event_B() { printf %s\\n ta.cer ca-victim.cer ca-victimchild.cer; }
event_X() { printf %s\\n ta.cer ca-evil.cer ca-fakevictim.crl; }
event_Y() {
    printf %s\\n ta.cer ca-evil.cer ca-fakevictim.cer ca-fakevictim.crl
}

expected_files=$(uniquify_args $(event_B; event_Y) )
t4s_log "expected_files=${expected_files}"

# override testcase() to set xfail for cases that are known to fail
testcase() {
    # if the evil CRL hierarchy is completely added before the victim
    # child cert is added, then this test will fail.  stated another
    # way, if any part of the evil CRL hierarchy is added after the
    # victim child cert then this will pass.
    pass=false
    all=$(printf " %s " $4)
    t4s_log "all=${all}"
    # this only contains the objects added after ca-victimchild.cer
    after_victim=${all##* ca-victimchild.cer }
    t4s_log "after_victim=${after_victim}"
    for f in $(event_Y); do
        case ${after_victim} in
            *" ${f} "*) pass=true; break;;
        esac
    done
    if "${pass}"; then
        t4s_testcase "$@"
    else
        t4s_testcase --xfail "see issue #52" "$@"
    fi
}

test_ABXY "${0##*/}".cache "${expected_files}"
t4s_done
