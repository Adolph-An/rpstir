#!/bin/sh

# This scenario uses the following forest:
#
#
#     Good TA (valid)     Evil TA (valid)
#     IPv4: 0.0.0.0/8     IPv4: 1.0.0.0/8
#     IPv6: ::/16         IPv6: 1::/16
#     AS:   1-127         AS:   128-255
#         |                   |
#         |                   |
#     Good CA (valid)     Evil CA (invalid, this is the "evil twin" of Good CA)
#     IPv4: 0.0.0.0/16    IPv4: 0.0.0.0/16 (outside of issuer resoures)
#     IPv6: ::/32         IPv6: ::/32 (outside of issuer resources)
#     AS:   1-63          AS:   1-63 (outside of issuer resources)
#         |
#         |
#     Test1 CA (valid)
#     IPv4: 0.0.0.0/24
#     IPv6: ::/48
#     AS:   1-31
#
# The five objects above are added to the database one at a time.  To
# ensure that the order in which the objects are added does not affect
# the outcome, all interesting permutations are tried (the database is
# scrubbed between permutations).

. "${TESTS_BUILDDIR}"/evil-twin-common.sh || exit 1

exp="ta-good.cer ta-evil.cer ca-good.cer test1-ca.cer"
testobj() { pecho "test1-ca.cer"; }
evilca() { pecho "ca-evil-invalid.cer"; }
run_tests "${exp}"
