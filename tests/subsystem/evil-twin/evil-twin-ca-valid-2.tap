#!/bin/sh

# This scenario is the same as evil-twin-ca-valid-1 except the Test1
# CA certificate is replaced with a ROA as in evil-twin-ca-invalid-2:
#
#     Good TA (valid)     Evil TA (valid)
#     IPv4: 0.0.0.0/8     IPv4: 1.0.0.0/8
#     IPv6: ::/16         IPv6: 1::/16
#     AS:   1-127         AS:   128-255
#         |                   |
#         |                   |
#     Good CA (valid)     Evil CA (valid, this is the "evil twin" of Good CA)
#     IPv4: 0.0.0.0/16    IPv4: 1.0.0.0/16 (modified resources to be valid)
#     IPv6: ::/32         IPv6: 1::/32 (modified resources to be valid)
#     AS:   1-63          AS:   128-191 (modified resources to be valid)
#         |
#         |
#     Test2 ROA (valid)
#     IPv4: 0.0.0.0/25
#     IPv6: ::/64
#     AS:   1
#     via Test2 EE (valid):
#     IPv4: 0.0.0.0/24
#     IPv6: ::/48
#     AS:   1-31

. "${TESTS_BUILDDIR}"/evil-twin-common.sh || exit 1

# override testcase() to set xfail for cases that are known to fail
testcase() {
    pass=true
    # if the evil hierarchy is completely added before the test ROA,
    # or if the entire evil hierarchy and the test ROA are added
    # before the good hierarchy is completely added, then it will fail
    # stated another way, if the good hierarchy and test ROA are added
    # before the bad hierarchy is completely added, then it will pass.
    case $(printf " %s " $4) in
        *evil*evil*" test2-ee.roa "*) pass=false;;
        *evil*" test2-ee.roa "*evil*good*) pass=false;;
        *" test2-ee.roa "*evil*evil*good*) pass=false;;
    esac
    if "${pass}"; then
        t4s_testcase "$@"
    else
        t4s_testcase --xfail "see ticket #29" "$@"
    fi
}

exp="ta-good.cer ta-evil.cer ca-good.cer ca-evil-valid.cer test2-ee.roa\
 test2-ee.roa.cer"
testobj() { pecho "test2-ee.roa"; }
evilca() { pecho "ca-evil-valid.cer"; }
run_tests "${exp}"
