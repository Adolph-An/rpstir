#!/bin/sh

# This scenario tests evil twin EE certificates rather than evil twin
# CA certificates:
#
#     Good TA (valid)         Evil TA (valid)
#     IPv4: 0.0.0.0/8         IPv4: 1.0.0.0/8
#     IPv6: ::/16             IPv6: 1::/16
#     AS:   1-127             AS:   128-255
#         |                       |
#         |                       |
#     Good ROA (valid)        Evil ROA (OK sig & resources; invalid from bad EE)
#     IPv4: 0.0.0.0/25        IPv4: 0.0.0.0/25
#     IPv6: ::/64             IPv6: ::/64
#     AS:   1                 AS:   1
#     via Good EE (valid):    via Evil EE (invalid, this is the "evil twin"):
#     IPv4: 0.0.0.0/24        IPv4: 0.0.0.0/24 (outside of issuer resources)
#     IPv6: ::/48             IPv6: ::/48 (outside of issuer resources)
#     AS:   1-31              AS:   1-31 (outside of issuer resources)

. "${TESTS_BUILDDIR}"/evil-twin-common.sh || exit 1

files="ta-good.cer ta-evil.cer ee-good.roa ee-evil-invalid.roa"
exp="ta-good.cer ta-evil.cer ee-good.roa ee-good.roa.cer"
# This is an alternative accepted result, though it shouldn't be.
# There's a bug that causes ee-evil-invalid.roa to be "accepted"
# depending on the file add order.  See tests/subsystem/roa-ee-munge
# and ticket #28.
exp2="ta-good.cer ta-evil.cer ee-evil-invalid.roa ee-good.roa.cer"
# This is another alternative that shouldn't be accepted.  It's the
# same bug as above, except for some reason both ROAs are being
# accepted instead of just one or the other.
exp3="ta-good.cer ta-evil.cer ee-evil-invalid.roa ee-good.roa.cer ee-good.roa"

run_tests "${files}" "${exp}" "${exp2}" "${exp3}"
