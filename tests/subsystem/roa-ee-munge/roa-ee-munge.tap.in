#!/bin/sh

# This script tests RPSTIR's reaction to the following situation:
#
#   1. empty the database
#   2. take a valid ROA, replace its EE with an "evil twin"
#      (specifically, take the EE cert and re-sign it using a
#      different CA that doesn't hold the resources mentioned in the
#      EE cert)
#   3. add the modified ROA
#   4. add the original ROA
#   5. add the CA certs
#
# In this scenario the modified ROA and its embedded cert should not
# be accepted, even though the non-EE part of the modified ROA is
# identical to the non-EE part of the original ROA.  Only the original
# ROA, its embedded cert, and the CAs should be reported as accepted.
#
# The object hierarchy in this scenario looks like this:
#
#     Good TA (valid)         Bad TA (valid)
#     IPv4: 0.0.0.0/8         IPv4: 1.0.0.0/8
#     IPv6: ::/16             IPv6: 1::/16
#     AS:   1-127             AS:   128-255
#         |                       |
#         |                       |
#     Good ROA (valid)        Bad ROA (OK sig & resources; invalid from bad EE)
#     IPv4: 0.0.0.0/25        IPv4: 0.0.0.0/25
#     IPv6: ::/64             IPv6: ::/64
#     AS:   1                 AS:   1
#     via Good EE (valid):    via Bad EE (invalid, this is the "evil twin"):
#     IPv4: 0.0.0.0/24        IPv4: 0.0.0.0/24 (outside of issuer resources)
#     IPv6: ::/48             IPv6: ::/48 (outside of issuer resources)
#     AS:   1-31              AS:   1-31 (outside of issuer resources)

@SETUP_ENVIRONMENT@

t4s_setup

u=${TESTS_TOP_SRCDIR}/tests/util.sh
. "${u}" || t4s_bailout "unable to load ${u}"

cd "${TESTS_BUILDDIR}" || t4s_bailout "unable to cd to ${TESTS_BUILDDIR}"

t4s_testcase --xfail "see ticket #28" "roa-ee-munge" '
    reset_add_check \
        "$1" \
        "ee-bad.roa ee-good.roa ta-good.cer ta-bad.cer" \
        "ee-good.roa ee-good.roa.cer ta-good.cer ta-bad.cer"
' "${0##*/}".cache

t4s_done
