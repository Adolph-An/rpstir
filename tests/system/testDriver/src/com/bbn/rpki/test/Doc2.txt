RPKI Test Framework

The RPKI test framework has two relatively independent parts: The
first is building a model of the RP hierarchy including the artifacts
(certs, roas, etc.) of the nodes over time based on the depth of the
hierarchy, its fan out characteristics, and how it should evolve over
time. The second is an emulation of the operation of the overall
system including the upload of artifacts to rsync repositories and the
updating of the cache.

The model building part is reasonably straightforward and is adapted
from the testbed_create python script by introducing evolution over
time. The description has also been altered to express time in terms
epochs. Because it is desirable for the test to execute as quickly as
possible, everything is run faster than normal; we cannot wait a year
for a certificate to expire. Instead, time-to-live values will
typically be a few seconds long and will depend on how fast testbed
setup, rsync downloads, validating cache update, and validity checking
can be performed.

The second part emulates the operation of the various relying parties
including their autonomy, inter-dependence, and eventually their
misbehavior. The basic steps of uploading the artifacts of the model
to repositories and updating the cache can be broken down into
independent activities corresponding to the independent nodes of the
model and the independent steps within a node that may either be
performed in parallel or in an arbitrary order. Further breakdown
allows for emulating the operational dynamics of computers and
networks such upload failure, updating in the middle of an upload.
The ways in which the steps can be broken down is explicitly
represented allowing the granularity of the breakdown to be varied.

A particular test is described by a test configuration file in .ini
format. The format is an extension of the test.ini file previously
used with the Python testbed creation script. Time is described in
terms of epochs. Each epoch represents the moment when the state of
one or more entities (nodes) changes. An epoch might correspond to
when a particular LIR publishes ROAs for a new allocation or when a
RIR publishes a new sub-allocation.

While an epoch corresponds to a point in time, the corresponding
sequence of events actually occurs over a period of time. These events
can be orchestrated to bear a particular relationship to when the
cache should be updated. For example, a new manifest might be
published, then the cache updated, and finally the remaining files
might be published.

