# This file should store functions only used by tests and undo any effects of
# envir.setup that are not correct for tests (e.g. $PATH mangling).
#
# This file should not be included directly by regular scripts. It should only
# be included via @SETUP_ENVIRONMENT@ or by setup_test_environment.sh, which
# does bootstrapping for @SETUP_ENVIRONMENT@.

# add all binaries to the path
BIN_DIRS="`@MKTEMP@`"
find "$TESTS_TOP_BUILDDIR/bin" "$TESTS_TOP_SRCDIR/bin" -type d -print | \
    sort | uniq > "$BIN_DIRS"
while read path_dir; do
    case "$path_dir" in
        */tests | */tests/*)
            ;;
        *)
            PATH="$path_dir:$PATH"
            ;;
    esac
done < "$BIN_DIRS"
export PATH
rm -f "$BIN_DIRS"
unset BIN_DIRS

# Remove @pkglibexecdir@ from the path.
# It could have been added by envir.setup, but it's inappropriate in tests.
export PATH=`echo "$PATH" | \
    sed "s,:@pkglibexecdir@:,:,g" | \
    sed "s,^@pkglibexecdir@:,," | \
    sed "s,:@pkglibexecdir@\$,,"`


# Shell function for checking if the number of lines of output matches
# the expected number.
check_num_output_lines()
{
    # Parameter 1 is the command line.
    # Parameter 2 is the error message if command returns nonzero.
    # Parameter 3 is the number of expected output lines.
    # If anything fails, exit the script with the right error code.

    TMPFILE=`@MKTEMP@` || \
        check_errs $? "$0 could not create temp file"

    CMDLINE=${1}		# re-wordsplit on whitespace
    $CMDLINE | tee $TMPFILE || check_errs $? "$0 ${2}"

    NUMLINES=$(cat $TMPFILE | wc -l)
    rm $TMPFILE
    [ $NUMLINES -eq "${3}" ] || \
        check_errs $? "$0 incorrect output: $NUMLINES lines (expected ${3})"

    return 0
}

run_bg () {
    LOG="$1"
    shift || exit 1
    PROG="$1"
    shift || exit 1

    log_dir="."
    if test -n "$TEST_LOG_DIR"; then
        log_dir="$TEST_LOG_DIR"
    fi

    case "$CHECKTOOL" in
        "valgrind")
            if test "x$STRICT_CHECKS" = x1; then
                valgrind --log-file="$log_dir/valgrind.$TEST_LOG_NAME.$LOG.log" --track-fds=yes --leak-check=full --error-exitcode=1 "$PROG" "$@" <&0 &
            else
                valgrind --log-file="$log_dir/valgrind.$TEST_LOG_NAME.$LOG.log" --error-exitcode=1 "$PROG" "$@" <&0 &
            fi
            ;;
        "" | "none")
            "$PROG" "$@" <&0 &
            ;;
        *)
            echo >&2 "Error: invalid value for \$CHECKTOOL: $CHECKTOOL"
            exit 1
    esac
}

run () {
    run_bg "$@" || return $?
    wait $! || return $?
    return 0
}

# Any test that calls use_config_file() should ensure that the config file
# it uses includes $TESTS_INCLUDE_CONFIG.
use_config_file () {
    test $# -eq 1 || fatal "Usage: $0 path/to/file.conf"

    export @CONFIG_ENV_VAR@="$1"
}

port_open() {
    command -v nc >/dev/null 2>/dev/null || fatal "nc utility not found"
    [ "$1" -ge 0 ] || fatal "must specify a port number"
    nc localhost "$1" </dev/null >/dev/null 2>&1
}
