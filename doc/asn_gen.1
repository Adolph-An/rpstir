ASN.1 Compiler (1)            ASN.1 COMPILER             ASN.1 Compiler (1)



NAME

        asn_gen - create C++ code from ASN.1 files

SYNOPSIS

        asn_gen ASN1file [namestem] [-c | -j] [-i includename]
            [-I pathname]... [-v | -V]  [-u] [-l]

DESCRIPTION

        Asn_gen takes the file  of  ASN.1  specifications  defined  by  the
        parameter  'ASN1file'  and  converts  the  data  to source code and
        header files suitable  for  compiling  and  using  with  the  ASN.1
        library  functions.   If  the  '-c'  switch  id  present, C code is
        generated,  for  which  the  library  functions  are  described  in
        casn_functions.3.   If  the  '-j'  switch  is  present,  Java code is
        generated,  for  which  the  library  functions  are  described  in
        asn_java_objects.3.   If  neither of these switches is present, C++
        code is generated, and  the  library  functions  are  described  in
        asn_objects.3.   The instructions below refer to all three types of
        output, unless specified otherwise.

        Each ASN.1 identifier becomes the name by  which  an  item  may  be
        addressed  by programs using the appropirate library.  For example,
        the ASN.1 specification

            Body ::= SEQUENCE {
                head        [0] Head,
                arms        [1] Arms,
                trunk       [2] Trunk,
                legs        [3] SET OF Leg }

        produces code that defines a Body object such that if one  declares
        such an object, one can refer to the sub-objects using the ordinary
        notation for members of structures.  For example, if

            Body body;

        is declared, then the Head object may be  addressed  as  body.head.
        An  object  in  a SET OF or in a SEQUENCE OF may be addressed as an
        array, e.g. body.legs[1] in C++.  Java and C  outputs  use  special
        indexing functions or methods.  If sub-objects are further defined,
        they may be addressed in the same way, e.g. if

            Leg ::= SEQUENCE {
                thigh   [0] Thigh,
                knee    [1] Knee,
                shin    [2] Shin,
                ankle   [3] Ankle,
                foot    [4] Foot}

        the  one  may  refer  to  body.legs[0].ankle.   The  addressing  is
        described in greater detail in the library documents.

        Any hyphens ('-') in  an  ASN.1  identifier  name  are  changed  to
        underscores in the 'C++' code.

        The program takes as  its  input  the  single  file  named  by  the
        'ASN1file'  parameter.   If  'namestem' is present, the results are
        written to 'namestem.C' and  'namestem.h'  respectively,  otherwise
        'namestem'  is  created by removing the suffix from 'ASN1file', and
        the output file names are made from that.  (If  'ASN1file'  has  no
        suffix,   the  whole name of 'ASN1file' is used to make 'namestem'.
        The resulting 'namestem.C' file begins with the statement

            #include "namestem.h"

        and the 'namestem.h' file contains

            #include "asn.h"
            #define _namestem_h

        For C output, '.c' and '.h' files are produced.  For Java,  '.java'
        files  are  produced  in the directory for the explicit or implicit
        'namestem', and each one starts with

            package namestem;

        If one or more instances of  the  '-i'  switch  are  present,  each
        'includename' is written at the start of the 'namestem.h' file as

            #ifndef _includename
            #include "includename"
            #endif

        with  any  periods  ('.')  in  'includename'  being  converted   to
        underscores in the '#ifndef' statement.

        The '-I' switch creates a search path for finding  imported  files.
        The search path consists of the 'pathnames' in the same sequence as
        they appear in the command, just like a 'C' compiler.

        The '-v', '-u', and '-l' switches are for diagnostic purposes.   If
        '-v' is present, a table of all the defined items is printed on the
        standard output in the form:

            #5 Name xxxx generation 3 flags 0x0 tag 0x30 at 0x234 has:
                Parent 2, mymap is '102', length 3

        where '#5' is the index in the table, 'xxxx'represents the name  of
        the  item, and the generation indicates the level at which the item
        occurs, generation 0 being the highest.  The second line shows  the
        index  of a 'parent' item followed by material of internal interest
        only.  There may be more than one parent line for an item.  If  the
        '-u'  switch is present, the temporary file(s) created by asn_gen's
        pre-processor are not automatically unlinked on  completion.   this
        is   occasionally  useful  for  determining  the  source  of  error
        messages.  If '-l' is present and 'namestem' is absent, the  output
        is listed on standard out instead of going to a named file.

        When the program is run it prints several messages:  As soon as  it
        starts it prints on standard error

            Starting ASN1file

        where 'ASN1file' is the name given as that parameter.   About  half
        way through it prints on its standard output

            Defined but not used:

        followed by a list of all the items that were defined but not  used
        in  any other definition, i.e. all the top level items.  Check this
        list carefully because it may indicate typographical or other input
        errors.  There must always be at least one such item.  If there are
        any items that are used in a  definition  but  are  not  themselves
        defined, this message is printed on the standard output

            Undefined items were:

        followed by a list of the items.  This is followed by the message

            File namestem.C

        where 'namestem' represents  the  parameter  of  that  name.   This
        message  indicates  that  the  program is starting to generate that
        file.  At the three quarters mark it prints on its standard output

            File namestem.h

        when it starts that file, and finally it  prints  on  the  standard
        error

            Asn_gen finished ASN1file OK

        If any error is encountered, a message (see DIAGNOSTICS  below)  is
        printed  on  the  standard error.  Usually such errors are reported
        before the '.C' file is started.

    Input File Requirements

        The  ASN.1  file  used  for  input  must  contain  a  'DEFINITIONS'
        statement.   All  text before that, such as a module name or object
        identifier, is disregarded.  At  present  there  may  be  only  one
        module per input file.

    Manifest Constants

        Any constant which is defined in ASN.1 like this

            constant ::= 999

        where 'constant' represents any word which begins with a letter and
        '999'  represents any decimal number, produces a line in the header
        file like this:

            #define constant 999

        In addition, any reference to that manifest constant in the  ASN.1,
        such  as in the definition of allowed ENUMERATED or INTEGER values,
        is recognized by the compiler  and  converted  to  the  appropriate
        numeric value.

        Object identifier constants may also be  defined  and  nested  like
        this:

                ID ::= OBJECT IDENTIFIER
                id-const        ID  ::= { 2.5 }
                id-const-item   ID ::= {id-ios 0}

    Ambiguous ASN.1 Specification

        Asn_gen  checks  that  the  ASN.1  input  does  not  have   certain
        ambiguities,  such  as  an  optional  item followed by another item
        having the same tag, or a SET which has two members with  the  same
        tag.  If any such ambiguity is discovered, a warning message

            ambiguous tagging of itemname

        is printed, where 'itemname' represents the name of  the  ambiguous
        item.

    SIGNED Macro

        Asn_gen implements the SIGNED macro in either of two forms.  If the
        input is

            Xxxx ::= SIGNED SEQUENCE {
                aaa     OBJECT IDENTIFIER,
                bbb     OCTET STRING}

        that is converted to

            Xxxx ::= SEQUENCE {
                toBeSigned              XxxxToBeSigned,
                algorithm               AlgorithmIdentifier,
                signature               BIT STRING}

            XxxxToBeSigned ::= SEQUENCE {
                aaa     OBJECT IDENTIFIER,
                bbb     OCTET STRING}

        If the input is

            Xxxx ::= CHOICE {
                yy      [0] Yyyy,
                zz      [1] SIGNED Yyyy }

        that is converted to

            Xxxx :: = CHOICE {
                yy      [0] Yyyy,
                zz      [1] SignedYyyy }

            SignedYyyy ::= SEQUENCE {
                toBeSigned  Yyyy,
                algorithm   AlgorithmIdentifier,
                signature   BIT STRING }

    Extensions and Modifications to ASN.1

      ANY DEFINED BY

        Asn_gen has a special capability for items that define other items,
        such as:

            AlgorithmIdentifier ::= SEQUENCE {
                algorithm       OBJECT IDENTIFIER,
                parameters      ANY DEFINED BY algorithm}

        If the entry for the defining item is altered by adding the 'TABLE'
        modifier, e.g.

                algorithm       OBJECT IDENTIFIER TABLE AlgTable,

        and another item is defined with the TABLE modifier, such as:

            AlgTable ::= TABLE {
                aaa         2.16.840.1      INTEGER,
                bbb         2.16.840.2.1    SomeParticularParams,
                ccc         1.2.840.1.1.2   NONE }

        then code will be generated to enforce the use of valid types.   In
        the  example,  algorithm  identifier  '2.16.840.1'  will  require a
        single integer as 'parameters', and '2.16.840.2.1' will require the
        structure  defined  by  'SomeParticularParams', but '1.2.840.1.1.2'
        will not allow any 'parameters'.  (In the last case,  the  reserved
        word  'NONE'  could have been omitted; having only two words in the
        item definition implies no 'parameters'.)   The  notation  for  the
        numeric  identifier  may  be  the  standard object-identifier 'dot'
        notation shown above, or a  plain  octal,  decimal  or  hexadecimal
        number  as  defined  in the C language (i.e. 10 = 012 = 0xA = 0xa).
        If the defining item ('algorithm' above) is within the same set  of
        braces  ('{}')  as  the defined item ('parameters' above), the 'ANY
        DEFINED BY' need only specify the defining item's name, but if  the
        definer is outside the closest set of braces, then the 'ANY DEFINED
        BY'  must  specify  the  definer  as  itemInClass,   where   'item'
        represents  the name of the definer and 'Class' represents the name
        of the set or sequence which contains the  definer.   (This  latter
        condition  is rarely found, but asn_gen needs a hint when that does
        occur.)  In all cases the definer must precede the defined item  in
        the  encoded  stream.  A definer may define more than one item, but
        it may have only one table.

        Items within a DEFINED BY object are addressed using the  names  in
        the table.  For example, if the C++ code declares

            AlgorithmIdentifier algid;

        the program may  address  the  'SomeParticularParams'  item  within
        'parameters' as 'algid.parameters.bbb'.


      OTHER DEFINED BY

        A further extension of the language allows for  'DEFINED  BY'  with
        other than 'ANY', e.g.

            Extension ::= SEQUENCE {
                extID   OBJECT IDENTIFIER TABLE ExtTable,
                extValue    OCTET STRING DEFINED BY extID }

            ExtTable ::= TABLE {
                simple  1.2.3.4 PrintableString,
                complex 1.2.3.5 SEQUENCE {
                    num     INTEGER,
                    string  OCTET STRING },
                plain   1.2.3.6 NOTASN1,
                other   0xFFFF  NOTASN1 }

        In this case the OCTET STRING in 'extValue' is defined to contain a
        PrintableString,  a  SEQUENCE,  or (by use of the new reserved word
        'NOTASN1') an unstructured OCTET STRING, depending on the  contents
        of  'extID'.  In the first two cases the contents of the 'extValue'
        are thus automatically 'unwrapped' and made accessible as  if  they
        were  ordinary members of an ANY DEFINED BY construct.  In the next
        to last case 'extValue' is treated as a simple  OCTET  STRING.   In
        the  last  case,  the  unique  identifier,  0xFFFF,  is  used  as a
        'catch-all' to match any other identifier.  It must, of course,  be
        the  last  entry  in  the  table.   (NOTE:  The  catch-all value is
        carefully chosen to be an illegitimate OBJECT  IDENTIFIER,  INTEGER
        or  ENUMERATED  value.   It  must  always be represented as exactly
        0xFFFF.)

        The  use  of  this   extension   is   described   more   fully   in
        asn_objects(3).

      MULTIPLE DEFINED BY

        A still further extension of the language  allows  a  'definer'  to
        define  more  than one object.  The defined objects may also have a
        more 'distant' relationship to the definer than ordinarily allowed.
        For example:

            XX ::= SEQUENCE {
                a   A,
                b   BIT STRING DEFINED BY a.c IN XX OPTIONAL}

            A ::= SEQUENCE {
                c   INTEGER TABLE Table,
                d   ANY DEFINED BY c }

            Table ::= TABLE {
                j   1    NULL J,
                k   2    INTEGER,
                l   3    NONE NOTASN1 }

            J ::= SEQUENCE {
                r   INTEGER,
                s   INTEGER }

        In this case the 'c' in  'A'  defines  both  item  'd'  immediately
        following  it  and  item  'b'  in  'XX'.   For the latter case, the
        definer is referred to  as  'a.c'  using  the  addressing  notation
        described  in asn_objects(3).  The text 'IN XX' is unnecessary here
        because 'a' is in the current object,  but  it  is  shown  here  to
        illustrate  how  a more distant relationship can be described.  The
        table must now have a column for each defined object, and the order
        of  the  defintions  must  obey  the following rule:  Trace all the
        defined objects back to a common 'ancestor' (in  this  case  'XX'),
        then  list the 'descendant' of an 'elder' item earlier in the table
        than the 'younger'.  In this case 'd' is derived  from  'a',  which
        comes  ahead  of  'b'  in  'XX',  so  the third column in the table
        describes the choices for 'd' and the fourth column  describes  the
        choices  for  'b'.   The  table  indicates that a value of 1 in 'c'
        means that 'd' is a NULL and 'b' contains a  'J'  structure  within
        the  BIT STRING.  A value of 2 means that 'd' is an INTEGER and 'b'
        must be absent.  A value of 3 means that 'd'  must  be  absent  and
        that  'b'  is  a  plain  BIT  STRING  with  no  inner ASN.1-encoded
        structure.

        The only restriction on the realtionships among the definer and its
        defined  objects is that they must have a 'common ancestor' defined
        within the current file, i.e. not imported.

        If in doubt about the rules as to which  item  goes  where  in  the
        table,  run  asn_gen with the '-v' switch and look at the resulting
        output, which for the case above looks like this:

          #0 Name XX generation 0, at 0x19, flags 0x4001, type 0x30, has:
              Parent -1, mymap is '(null)', length 0
          #1 Name A generation 1, at 0x6A, flags 0x4001, type 0x30, has:
             Parent 0, mymap is '0', length 1
          #2 Name J generation 4, at 0x106, flags 0x4001, type 0x30, has:
             Parent 6, mymap is '0000', length 4
          #3 Name bInXX generation 1, at 0xB9, flags 0x804, type 0x120, has:
             Parent 0, mymap is '1', length 1
          #4 Name aInXX generation 1, at 0x31, flags 0x0, type 0xFFFFFFFF, has:
             Parent 0, mymap is '0', length 1
          #5 Name cInA generation 2, at -1, flags 0x1000, type 0x2, has:
             Parent 1, mymap is '00', length 2
          #6 Name Table generation 3, at 0xB9, flags 0x4041, type 0x2, has:
             Parent 5, mymap is '000', length 3
             Parent 7, mymap is '010', length 3
             Parent 3, mymap is '10', length 2
          #7 Name dInA generation 2, at 0xB9, flags 0x800, type 0x120, has:
             Parent 1, mymap is '01', length 2

        Entry #6 for Table shows it is 'descended from' the  definer,  'c',
        and  the  two  defined  objects,  'd' and 'b'.  Since 'd' is listed
        ahead of 'd' as a parent of 'Table', its definitions precede  those
        for 'b'.

    CHOICE in Definer

        A still further extension allows a defining object to  be  of  more
        than  one type, e.g. either an INTEGER or an OBJECT IDENTIFIER.  If
        the contents of the definer are unique without consideration of the
        tag  (as is usually the case with INTEGERs and OBJECT IDENTIFIERs),
        then a form like this may be used:

            Y ::= SEQUENCE {
                a   ANY TABLE Ytable,
                b   OCTET STRING DEFINED BY a }

            Ytable ::= TABLE {
                one     1   INTEGER,
                two     2   BIT STRING,
                objid   1.2.3   BOOLEAN }

        If the contents of the definer may be ambiguous without considering
        the tag, then a more complex form like this is required in order to
        differentiate the cases:

            Z ::= SEQUENCE {
                a   Definer,
                b   Data }

            Definer ::= CHOICE  {
                i   INTEGER TABLE Inttable,
                o   OBJECT IDENTIFIER TABLE Objtable}

            Data ::= CHOICE {
                i OCTET STRING DEFINED BY i IN Definer,
                o OCTET STRING DEFINED BY o IN Definer}

            Inttable ::= TABLE {
                one     1       INTEGER,
                two     0x2A03  BIT STRING }

            Objtable ::= TABLE {
                objid   1.2.3   BOOLEAN }

        Note that in the first example an INTEGER with  the  value  0x2A03,
        (which  is  the  encoded  representation  of  the OBJECT IDENIIFIER
        '1.2.3') will call for item 'b' to be a BOOLEAN, as  prescribed  in
        'Ytable'.  In the second example such an INTEGER will call for item
        'b' to be a BIT STRING as prescribed in 'Inttable'.   Although  the
        object  'Data' is defined to be a CHOICE between two OCTET STRINGs,
        that is allowed in this case because the  DEFINED  BY  removes  the
        ambiguity.

    Classes

        The program recognizes definitions with the key word  'CLASS'  such
        as this:

            ATTRIBUTE ::= CLASS {
                &Type,
                &id     OBJECT IDENTIFIER UNIQUE }
            WITH SYNTAX {
                WITH SYNTAX     &Type
                ID              &id }

        The allowed values of 'id' must then be defined in  somethimg  like
        this:

            SupportedAttributes ::= { 2.5.4.6 | organizationName | 0xFFFF}

        When the class is invoked, as in:

            AttributeValueAssertion ::= SEQUENCE {
                type        ATTRIBUTE.&id({SupportedAttributes}),
                value       ATTRIBUTE.&Type({SupportedAttributes}{@type}) }

        that is translated into

            AttributeValueAssertion ::= SEQUENCE {
                type        OBJECT IDENTIFIER TABLE SupportedAttributes,
                value       ANY DEFINED BY type }

        In addition, a table, 'SupportedAttributes'  is  prepared  so  that
        when an instance is defined like this:

            countryName ATTRIBUTE ::= {
                WITH SYNTAX     PrintableString (SIZE(2))
                ID              ( 2.5.4.6 ) }

        it becomes a definition of the type

            CountryName ::= PrintableString ( SIZE (2))

        and an entry in the table like this

            countryName 2.5.6   CountryName

        In the example above the  table  would  include  entries  for  each
        supported  attribute  which had an instance defined, plus the final
        entry;

            any 0xFFFF ANY

        Note that the table entries will appear in the order in  which  the
        identifiers  are listed, so the catch-all, 0xFFFF, should appear at
        the end, if used.

        The several parts of the class definition and use  must  appear  in
        the  order  shown above, i.e. first the CLASS declaration, then the
        list of supported  identifiers,  followed  by  the  class  instance
        definition and the particular members.

        The class TYPE-IDENTIFIER, defined in Annex A of ITU-T Rec.  X.681,
        is built in to the program.


    Imports

        An IMPORTS statement must be extended to provide information as  to
        where  to  find the file containing the imported definitions.  This
        is done by adding after each 'FROM' and module  name  the  reserved
        word  'IN' and the file name.  The search path will be used to find
        the file.  Imported files may import other files.

    Exports

        No change is required in the export statement.   If  an  object  is
        imported  from  another file but is not on that file's export list,
        the warning message

            In class IMPORTS, %s is not on export list

        is given (see Diagnostics below).  If the imported object  is  used
        in a SET OF or a SEQUENCE OF, e.g.

            Importer ::= SET OF Imported

        the C++ compiler will detect errors  at  any  attempts  to  do  any
        operations  specific  to  a  SET/SEQUENCE  OF, such as the indexing
        operation described  asn_objects(3).   This  can  be  corrected  by
        adding  the name of the imported item to the imported file's export
        list.

    Constraints

        The 1994 ASN.1 provides for the definition of  certain  constraints
        which are trested in special ways by the program.  In one case this
        requires supplementary action by  the  programmer.   The  construct
        'CONSTRAINED BY' produces a member function definition in the class
        definition.  For example, if the ASN.1 specifies

            Zzz ::= SEQUENCE {
                after   UTCTime,
                before  UTCTime }
            (CONSTRAINED BY -- one must be present -- )

        the program will create a definition of a  constraint  function  in
        the class definition in the header file like this

            class Zzz : public AsnSequence
                {
              public:
                int constraint();
                  ;
                  :
                Zzz():
                };

        The user of the program must  write  this  constraint  function  to
        implement the requirement called for in the comment.  The rules for
        such functions are described in asn_objects(3).

        Other constraints, such as 'WITH COMPONENTS" and the definition  of
        a  range  of  values  for  an  INTEGER,  e.g.  '(1..256)', define a
        constraint function and also declare it in the '.C' file.   Various
        other  constraints,  such  'SIZE',  'OPTIONAL'  and  'DEFAULT'  are
        handled without a constraint function.


    Recursive Nesting of Objects

        If the ASN.1 file contains any recursive nesting  of  objects,  the
        program  will  detect  that  and print an error message.  The ASN.1
        text must be changed to eliminate the loop by making some element a
        pointer.  For example, if the ASN.1 is:

            A ::= SEQUENCE {
                b   B,
                c   C }

            B ::= SET {
                d   D,
                e   E}

            D ::= SEQUENCE {
                a   A OPTIONAL,
                f   F}

        the program will report

            Nesting detected: A contains B
                which contains D
                which contains A
            ****** Nesting detected

        To correct the problem, the ASN.1 must be changed to:

            D ::= SEQUENCE {
                a   *A OPTIONAL,
                f   F}

        Alternatively, if the original ASN.1 had been, in part

            D ::= SEQUENCE {
                a   G,
                f   F}

            G ::= A

        the last statement would have to be changed to

            G ::= *A

        The addressing of objects through pointers is discussed more  fully
        in asn_objects(3).

    Functions

        A reserved word, "FUNCTION", is recognized for adding a function or
        a data item to a C++ object.  For example, this coding:

            Body ::= SEQUENCE {
                head        [0] Head,
                arms        [1] Arms,
                trunk       [2] Trunk,
                legs        [3] SET OF Leg
                FUNCTION    int describe(char *),
                FUNCTION    short count }

        adds the function 'describe' as a member of the class Body so  that
        one can invoke it in something like this:

            int length = body.describe(buffer);

        and adds the data item 'count' as a short integer (in the 'C' snese
        of  integer).   A data item added in this way may be referred to in
        the same way as the ASN.1 items, e.g.

            body.count = 1;

        but it is  not  affected  by,  nor  does  it  affect,  any  of  the
        operations described in asn_objects(3)..

    Synthetic Names

        The name for addressing each  item  is  normally  provided  on  the
        left-hand side of the definition line, e.g.

            head        Head

        above, but in some cases there is no such name.  (The latest  ASN.1
        specifications  forbid such absent identifiers, but asn_gen accepts
        them for backward compatibility.) In those cases a  synthetic  name
        is generated by asn_gen.  One such case is a CHOICE, such as

            XXX ::= CHOICE {
                [0] YYY,
                [1] ZZZ}

        The synthetic name  created  by  asn_gen  is  the  right-hand  name
        de-capitalized, so that this example becomes

            XXX ::= CHOICE {
                yYY  [0] YYY,
                zZZ  [1] ZZZ}

        The transformation depends on the  actual  right-hand  name  as  it
        appears,  not  as  it  may  subsequently  be defined, so that 'yYY'
        becomes the name even if there is a subsequent definition

            YYY ::= INTEGER

        If the right-hand name is the name of a simple universal  tag,  the
        name is converted to one of the following:

            boolean         objectIdentifier    videotexString
            integer         enumerated          iA5String
            bitString       numericString       uTCTime
            octetString     printableString     generalizedTime
            null            teletexString

        Objects which are defined with implicit enumeration, such as

            Version ::= INTEGER {
                1988 (0),
                1994 (1)}

        imply numeric names that are not acceptable to C++.  Asn_gen solves
        this  by  prefixing  the  number with an 'e' (for enumerated), e.g.
        'e1988'.

        Usually the class of any item is determined by the right-hand  name
        in the definition, e.g. the class of the item above

                head    [0] Head,

        is Head, but whenever there is a SET OF or a SEQUENCE OF in an item
        definition,  a  class  name  must  be  manufactured by asn_gen.  An
        example of this is the definition above;

                legs    [3] SET OF Leg

        The rule that asn_gen uses is to concatenate  the  itemname,  "In",
        and the higher class name, and then to capitalize the result, e.g.

                legs    [3] LegsInBody

        followed later by

            LegsInBody ::= SET OF Leg

        Generally this of no concern  to  the  programmer,  but  there  are
        circumstances,  described  in asn_objects(3), when these names must
        be used.

        A similar transformation is required for  any  nested  definitions,
        such as

            A ::= SEQUENCE {
                b   SET {
                    c   INTEGER,
                    d   BOOLEAN}}

        which becomes

            A ::= SEQUENCE {
                b  BInA}

            BInA ::= SET {
                c   INTEGER,
                d   BOOLEAN}

        Care must be taken if  a  nested  definition  is  combined  with  a
        missing item identifier.  For example:

            XXX ::= SET {
                y       OCTET STRING,
                SEQUENCE OF ZZZ}

        becomes

            XXX ::= SET {
                y       OCTET STRING,
                zZZ     ZZZInXXX}

            ZZZInXXX ::= SEQUENCE OF ZZZ

        It is probably easier to remove such constructs in the ASN.1.

        Pointers, too, create synthetic names if they appear within braces.
        For example, the definition

            D ::= SEQUENCE {
                a   *A OPTIONAL,
                f   F}

        is changed to

            D ::= SEQUENCE {
                a   AInD OPTIONAL,
                f   F}

            AInD ::= *A

        And, yes,  these  synthetic  names  may  become  nested,  i.e.  the
        pathological case

            J ::= SEQUENCE {
                k   SET {
                    m   SET OF *J}}

        becomes

            J ::= SEQUENCE {
                k KInJ }

            KInJ ::= SET {
                m MInKInJ }

            MInKInJ ::= SET OF JInMInKInJ

            JInMInKInJ ::= *J

        Remember, the programmer rarely has to know about  these  synthetic
        names,  and  the need for them is evident when you try to determine
        the class name from the definition.  If in doubt, look at the  '.h'
        file which is generated.

    Reserved Words

        Names which are reserved words in C++ may not be used in any  ASN.1
        definition.   Since  all C++ reserved words begin with a lower case
        letter, this applies only to the left hand name in  the  definition
        of  an  item  within  braces.   Definitions such as upper bounds or
        object identifiers  are  exempt  because  they  do  not  appear  as
        variable names in the C++ code produced.

DIAGNOSTICS

        If there is no error, asn_gen exits with zero  and  prints  on  its
        standard error

            Asn_gen finished ASN1file OK

        where 'ASN1file' represents the parameter given to asn_gen.  If  an
        error  is  found,  one  of the following messages is printed on the
        standard error with a name substituted for '%s':

            Invalid parameter: %s
            Can't open %s
            Nesting in %s not allowed
            no child of %s in table
            invalid word: %s
            memory error
            tag for %s already defined
            ambiguity in DEFINED BY %s
            can't find definer/defined path for %s
            syntax error at %s
            nesting detected
            unexpected EOF at %s
            extra tag definition 0x%lX
            undefined upper bound %s
            duplicate definition of %s
            ID %s is not defined
            no table defined for %s
            missing %s
            %s is not on the export list
            ambiguous tagging of %s
            stuck in loop at %s, Check syntax.

        Many of the error messages are prefixed with '****** In class %s, '
        where  '%s'  is  replaced  with the object class name.  Some of the
        errors are fatal, resulting in a non-zero  exit  code;  others  are
        merely warnings.  Both kinds are printed with a 'beep'.

        The "extra tag definition" warning occurs if  an  item  is  defined
        with two or more explicit tags, like this:

            X ::= SET {
                y   [0] EXPLICIT Y,
                z   [1] Z}

            Y ::= [APPLICATION 5] SET OF OCTET STRING
