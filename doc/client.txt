Client Installation and Usage Manual
Version 1.0

1.0 Organization of this document

This document describes how to install and use the BBN Address Space
PKI database/repository software.  Please refer to the design document,
apkidesign.doc, for a detailed description of the various software
components in this release.

Section 2 of this document describes how to install that software,
including all its dependencies.  Section 3 provides a quickstart
guide on how to get your system running.  Section 4 provides detailed
information on how to run the database client programs. Section
5 describes the other documents in the deliverable package. Finally,
Appendix A provides troubleshooting tips for some common problems.

2.0 Installation

2.1 Prerequisites

2.1.1 OpenSSL

Install the latest released version of the OpenSSL package from
http://www.openssl.org.  It should be at least version 0.9.8d. Follow
the installation instructions for that package.  We recommend the default
installation target directory /usr/local/ssl.

2.1.2 MySQL

Install the MySQL open source database from http://mysql.org. We recommed
the default installation target of /usr/local/mysql. Also install the
Connector/ODBC driver from the same site.  Insure that the 3.51 driver
is install.  We strongly recommend that you give the root account a
password in the odbc initialization file (typically /usr/local/etc/odbc.ini.

2.2 APKI database software

The APKI software will have been delivered to you as a gzip-ed tarball
named APKI.tgz.  Gunzip using the command:

    gunzip APKI.tgz

and then un-tar the resulting tarball using the command

    tar xvpf APKI.tar

This will create a directory named APKI which will contain various
subdirectories. The ones that are important to you are the cg, roa-utils,
proto and doc subdirectories. The first thing you should do is issue the
"make" command in the top level directory.  This will build everything in
cg, roa-utils and proto.  In the directory "proto" you should now have four
executables: rcli (the rsync database client), query (the query database client),
garbage (the garbage collection database client) and chaser (the chaser database
client). If these have built without errors (warnings can safely be ignored) then
you have successfully installed the APKI software.

The final step that you need to perform is to initialize the MySQL database
tables.  To do this you will need the MySQL root password that you set in
step 2.1.2 above.  Execute this command from the proto directory:

     ./rcli -t TOPDIR

where TOPDIR is replaced with the name of the top level directory for you
repository.  This command will ask you for the MySQL root password. It will
also ask you to confirm your action, as this step may destroy any APKI
database tables already present.

If this command succeeds you are ready to begin using the APKI database
software.  If this command fails, see Appendix A, Troubleshooting.

3.0 Quickstart

Three of the four database client executables are typically run in the
background, as daemon processes. Only query, the query client is usually
run on the command line.  rcli, the rsync database client is responsible
for interfacing with the output of rsync_pull.sh and rsync_aur. It is
usually run as follows:

	rcli -p -w PORT &

where PORT is a randomly chosen high-number TCP port that is not in use
(e.g. 4444).  The "-p" flag tells rcli to run perpetually, processing
incoming socket sessions whenever they arrive. "-w" tells it to wait for
connections on port PORT, then process each event as it arrives from
rsync_aur. rcli will log its actions in a file named rcli.log in the directory
in which it is started. Unless it exits abnormally, it should only need to
be run once.

garbage, chaser, rsync_aur, rsync_pull.sh, query: TBD

4.0 Clients

4.1 rsync_pull.sh

4.2 rsync_aur

4.3 rcli

rcli is the rsync database client. It acts as an intermediary between
rsync_aur and the MySQL database. It can be run as a background process or
in the foreground. The former has already been described in the Quickstart
section. The complete command line for rcli is as follows:

    rcli [-h] [-p] [-w PORT] [-t TOPDIR] [-x] [-y] [-d FILE] [-(f|F) FILE]

The -h command line options causes rcli to print a help message and exit. The
-p command line option indicates that rcli is to be run in perpetual mode, and
is used with -w to specify a listening port. The PORT number given to port is
assumed to be a TCP port unless it begins with the letter u, in which case it
is taken to be a UDP port (e.g. u5555). At the present time only TCP support
is fully implemented, so refrain from specifying a UDP port. The -t argument is
used to initialize the MySQL database tables, with TOPDIR given as the top
level repository directory. Note that this option may result in all current
database data being lost, so use it with caution. The -x option is used to
delete all MySQL database data and tables. Note that both -t and -x require
the MySQL root password, and also require explicit confirmation. The latter
action is skipped if -y is also specified on the command line.

The -d option is used to delete an entry from the database. It must be followed
by the name of a certificate, CRL or ROA file corresponding to the object to
be deleted. The -f option is used to add an object to the database, and must
also specify a file indicating the object to be added. If -F is used instead
then the FILE is taken to be a trust anchor certificate.  It is an error to use
-F with anything other than a certificate file.

4.4 query

4.5 garbage

4.6 chaser

5.0 Document resources

client.txt	This file
api.txt		API for the database, ASN.1 and ROA libraries
testplan.doc    Test plan
apkidesign.doc	Top level design document
codereview.doc	Code review standards
apkiaur.txt	rsync_aur/rcli socket communication protocol

Appendix A. Troubleshooting

A.1 Database troubleshooting

If you are having database errors, particularly when you first attempt to
use rcli, it is important to check and make sure that your MySQL installation
is correct.  Try the following command:

    mysql --user=mysql

This should connect you to the database and give a "mysql> " prompt back. If
it does not, then your MySQL and/or ODBC installation is not correct. Check
the troubleshooting section of the MySQL documentation. Verify that your ODBC
information, in /usr/local/etc/odbc.ini and /usr/local/etc/odbcinst.ini, is
correct.  Verify that the MySQL daemon process mysqld is running using "ps -ef".
Verify that there is a mysql socket named mysql.sock, typically in /tmp.

Once you can successfully connect to the database as user "mysql" try
connecting as root by issuing the command:

    mysql --user=root --password=PWD

where PWD is the root password specified in your odbc.ini file. If this does
not succeed, follow the steps given in the MySQL manual for resetting the
root password, then stop and restart the mysqld process.

Other information TBD.
