The goal of system testing for the APKI software is to verify that
the top level functions of the system are being performed correctly.
At the highest possible level, the system can be thought of as consisting
of four components: the "rsync toolchain", the "gc toolchain", the
"query toolchain" and the "chaser toolchain". The rsync toolchain
consists of rsync itself, the rsync_aur software, the rcli program,
the underlying APKI database, and of course the DB infrastructure
libraries that mediate access to the DB.  The gc toolchain consists
of the garbage collection client, the DB libraries and the DB; the
query toolchain consists of the query client, the DB libraries and
the DB; and, finally, the chaser toolchain consists of the chaser
client, the DB libraries and the DB itself. Note that since the chaser
toolchain can invoke the rsync toolchain, the chaser toolchain is, in
some sense, a dependent of the rsync toolchain.  Since all of the
toolchains touch the DB libraries and the DB itself they are, of course,
interdependent.

In the point tests, the individual functions of the system were tested.
In the performance tests, the overall performance of each client was
tested, as well as the (implicit) performance of the DB and its libraries.
In system testing and end-to-end test will be performed that will simulate
the operations of a typical user over the course of several days. The
idea is to test for the presence of unexpected interactions between the
toolchains, and also to test for the overall operational behavior of
the system.  In addition to attempting to duplicate the primary use
case of the users, three areas will be singled out for more detailed
examination: database table locking, resource utilization and stale
certificate handling.

The nominal operational model for the four clients is that they are
not expected to overlap in time. This cannot be guaranteed, however, so
it could well occur that one or more clients are running at once. Each
client is a user of the database so there is at least the theoretical
possibility that such simultaneous accesses could create an issue. The
stated behavior of MySQL is that it enforces locking on database accesses
such that no collisions can occur, e.g. it is allegedly not possible to
have two (or more) clients be incompatibly accessing a given set of
entries at the same time.  This will be verified by actually running
the four clients on the simulated database (as described in the performance
testing section) at the same time. Before this is done, however, the
"mysqladmin" command line tool will be used to enable debugging in the
MySQL APKI database. This causes debug information to be written for
each transaction, including error information in case an error occurs.
Once the simultaneous invocation of the four clients has completed,
this debug log will be examined for the presence of any errors or warnings.

Several client programs, notably rcli, gc and chaser, are designed to
run as daemon programs. This means that in normal operation they will
be running perpetually in the background. Whenever a long-lived process
is present on a system there is always the possibility that it will have
a resource leak. The most common form of resource leak is a memory leak.
If a program has a memory leak, and that program runs for a substantial
period of time, it can eventually degrade overall system performance and
even lead to system crashes. Other types of equally unfortunately resource
leaks are also possible. A long-running program can leak file descriptors,
for example, which will impact its functionality at the point when it
can no longer open any new files.  In short, any resource leak in a daemon
program is undesirable.  Fortunately there are a set of Unix/Linux utilities
than can be used to track resources and expore potential resource leaks.
Each of the daemon processes will be left running for a period of at
least a week. During this period statistics, using "ps", "vmstat", "iostat"
and "lsof" will be collected on at least a daily basis. At the end
of the weeklong test the resulting statistical data will be examined to
determine if there are any pernicious trends, such as an every growing
use of memory, an every growing number of open file descriptors, and so
forth.

As indicated in the design document (apkidesign.doc) "stale" certificates
require special handling by the query client. When a ROA is validated
during the comprehensive query, one or more of the certificates encountered
on the validation path may have its stale bit set. This indicates that the
CRL corresponding to this certificate has not been updated in a timely
fashion, as indicated by its nextUpdate field having passed. The query
client is told by the user how to handle ROAs having a stale certificate
in their path: either (a) treat them as valid; (b) treat them as invalid;
(c) or treat them specially, with the ROA output going to a separate file.
These three modes of operate will be separately tested. Namely, local
database modification will be used to set the stale bit on a variety of
certificates (with a "st" filename prefix).  The query client will then
be invoked which each of the three command line arguments corresponding to
the three cases, and the outputs examined. Cases (a) and (c) can be immediately
compared, in that the union of the file contents of the nominal ROA output
file and the special output file in case (c) should exactly equal the file
contents of the nominal output file in case (a). Case (b) will be tested
by looking at the exclusive OR of the nominal file from case (a) and the
special file from case (a), which should exactly equal the nominal output
file in case (b).

In addition to these three focused tests, general operational testing will
also be done. The important aspect of this testing is to have observables.
To this end, local file cloning and local database modification will be
done so that the set of results to be expected is exactly known in advance.
For example, in the fake repository all the new files to be added can
be arranged to have filenames beginning with "add" as well as some
deliberately invalid objects with filenames beginning with "bad". In the
local database a set of scripted modifications will be done to insure
that a set of entries will expire today and that these entries (in the
filename field in the database) will have a prefix "exp". Similar modifications
will also be done to create a set of certificate table entries that will
be revoked having the prefix "rev". Entries that chaser would notice can
be crafted so that the resultant SIA, AIA, and CRLDP values all contain
"new" within their URIs.  Finally, ROA entries will be modified so that
the resulting output of the comprehensive query will have a predictable
pattern.

Once this staging of the test database has been done, a typical day in
the life of the user will be performed.  Each of the toolchains will be
exercised in turn. After each tool is run the contents of the database
will be examined using the "mysql" command line tool, and the actual
result compared with the expected result.  This comparison will then be
repeated, but in this case using the query client in its command line
(non-comprehensive) mode.  The results obtained from "mysql" and from
the query client should be identical.

Note will also be made of the time that each invocation takes.  Finally when
all four toolchains have been exercised (noting that chaser may reinvoked rsync,
so that the rsync toolchain will be invoked at least twice) the overall expected
result will be compared with the overall actual result. An operational
timeline will also be developed based on the invocation times for each
toolchain, and this timeline compared with the nominal one day timeline
with gaps that is the hoped for outcome.
