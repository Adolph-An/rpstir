API documentation
Version 1.0
May 2, 2007

This document describes the externally visible functions in the database (DB)
abstraction layer.  It also describes the compilation and linkage options one
must use in order to use these functions.

1.0 Compilation environment

1.1 Include files

All programs should include at least the following files:

    #include <stdio.h>
    #include <stdlib.h>
    #include <unistd.h>
    #include <string.h>
    #include <sys/types.h>
    #include <sys/stat.h>
    #include <sys/socket.h>
    #include <sys/ioctl.h>
    #include <ctype.h>
    #include <getopt.h>
    #include <time.h>
    #include <netdb.h>

    #include "scm.h"
    #include "scmf.h"
    #include "sqhl.h"
    #include "diru.h"
    #include "myssl.h"
    #include "err.h"

1.2 Compilation options

All code should be compiled with the following options, similar to those given
in the top level makefile for the DB client applications:

   -I/usr/local/include -ISSL_INCLUDE -IROA_INCLUDE -IASN_INCLUDE -ICASN_INCLUDE \
   -DHAVE_LONG_LONG

where SSL_INCLUDE is the full path to the OpenSSL include directory (typically
/usr/local/ssl/include), ROA_INCLUDE is the full path to the "roa-lib" directory
(typically ../roa-lib), ASN_INCLUDE is the full path to the "asn" directory
(typically ../cg/asn), and CASN_INCLUDE is the full path to the "casn" directory
(typically ../cg/casn).

1.3 Linkage options

All code should be linked with

    -LRPKI_LIB -LSSL_LIB -LROA_LIB -LASN_LIB -LCASN_LIB

where RPKI_LIB is the full path to the rpki library (typically .), SSL_LIB is the
full path to the OpenSSL library directory (typically /usr/local/ssl/lib), ROA_LIB
is the full path to the ROA utilities library (typically ../roa-lib), ASN_LIB is
the full path to the ASN.1 library (typically ../cg/asn) and CASN_LIB is the full
path to the casn utility library (typically ../cg/casn).

The library link should contain at least the following:

      -lrpki -lssl -lcrypto -lmyodbc3 -lrt -lroa -lasn -lcasn

2.0 Function descriptions

This section contains descriptions of each of the publicly accessible functions
in the database interface, as well as descriptions of the publicly accessible functions
in the OpenSSL, ROA and ASN abstraction layers, together with some additional
utility functions.

Unless otherwise stated, functions that return an "int" will return 0 to indicate
success, and will return a negative error code defined in err.h to indicate failure.

Although the user may see other functions publicly exported from various
include files, the prudent approach is to totally shun those functions unless
they are documented herein.

2.1 Low level database functions

2.1.1 scmcon *connectscm(char *dsnp, char *errmsg, int emlen)

This function attempts to open a connection to the Resource PKI MySQL database.
"dsnp" is a non-NULL pointer to a Data Set Name (DSN); "errmsg" is a non-NULL
pointer to a string of strictly positive length "emlen".  On success an opaque
connection object of type "scmcon" is returned.  On failure NULL is returned
and an error message (possibly truncated based on "emlen") is placed in "errmsg".

2.1.2 void disconnectscm(scmcon *conp)

This function disconnects from the database connection "conp". If "conp" is NULL
or not otherwise a valid, currently open database connection nothing happens. If
"conp" is a valid, currently open database connection, it is closed, all associated
database state is cleared and all allocated memory is freed.

2.1.3 char *geterrorscm(scmcon *conp)

This function returns a textual description of the last error that occurred over
the database connection "conp", which must be a valid, currently open database
connection. If no errors have occurred or if it is not possible to fetch the error
information, NULL is returned.

2.1.4 char *gettablescm(scmcon *conp)

This function returns a human-readable name for the last database table that was
accessed over the database connection conp.  If no tables have ever been accessed,
or if there is an error on the connection, NULL is returned.

2.1.5 err_code createdbscm(scmcon *conp, char *dbname, char *dbuser)

This function creates a database named "dbname" with nominal access rights for
user "dbuser" in the Resource PKI database, using the database connection "conp".
"dbname" and "dbuser" must not be NULL.  "conp" must be a database connection
that has root access to the MySQL database. Typical user applications should never
have to call this function.

2.1.6 err_code deletedbscm(scmcon *conp, char *dbname)

This function deletes the database named "dbname" in the Resource PKI database,
using the database connection "conp". "dbname" must not be NULL. "conp" mus be
a database connection that has root access to the MySQL database. All tables within
"dbname" are deleted. Typical user applications should never have to call this
function.

2.1.7 scm *initscm(void)

This function creates and returns an opaque data structure of type "scm" that
describes the database schema for the Resource PKI. Note that this function is
intended to be a singleton: it should be called at most once in any application.
On success it returns a non-NULL pointer. On failure it returns NULL. Note that
if this function succeeds it returns allocated memory that must be freed by
the caller.

2.1.8 void freescm(scm *scmp)

This function is used to free the memory allocated by initscm().

2.1.9 err_code createalltablesscm(scmcon *conp, scm *scmp)

This function creates all the tables within the default Resource PKI database. It
uses a database connection "conp" which must have root access to the MySQL database.
It also uses a textual representation of the database schema, as encapsulated in
the opaque data structure "scmp" of type "scm". Typical user applications should
never have to call this function.

2.1.10 int statementscm(scmcon *conp, char *stm)

This function executes the SQL statement in "stm" which must be non-NULL, using
the database connection "conp".

2.1.11 scmtab *findtablescm(scm *scmp, char *hname)

This function takes a database schema pointer and the human-readable name of
a table in the schema and returns a pointer to an opaque object of type "scmtab".
If the table can be found this pointer will be non-NULL. If a non-existent table
is specified or if any error occurs NULL is returned.

2.1.12 int insertscm(scmcon *conp, scmtab *tabp, scmkva *arr)

This function performs an SQL insert operation on the table specified by "tabp"
(discovered using findtablescm()) over the database connection "conp". The row
to be inserted is specified in the "arr" argument, which is a pointer to a
data structure scmkva, defined as follows:

     typedef struct _scmkva
     {
       scmkv    *vec;
       int       ntot;
       int       nused;
       int       vald;
     } scmkva;

The "vec" member defines an array of scmkv elements. The total number of
such elements is "ntot" while the number of elements actually used is "nused".
If the scmkva has already been used in a successful insert operation then
"vald" may be set to 1, otherwise it should be set to 0. The array "vec"
contains data structures of the form:

      typedef struct _scmkv
      {
        char     *column;
        char     *value;
      } scmkv;

giving the name "column" of a column to whose value should be set to "value".
Thus, for example to insert a row with three columns "blah" "foo" and "baz"
whose values are, respectively 10, "fortran" and the binary value 0x2233 the
following code could be used:

	  scmkva ins;
	  scmkv  cols[3];

	  cols[0].column = "blah";
	  cols[0].value = "10";
	  cols[1].column = "foo";
	  cols[1].value = "fortran";
	  cols[2].column = "baz";
	  cols[2].value = "0x2233";
	  ins.vec = (&cols[0]);
	  ins.ntot = 3;
	  ins.nused = 3;
	  ins.vald = 0;

Note that all column names and column values are given as strings. This
means that non-string values must be converted into strings before the
insertscm() function can be used.

2.1.13 int deletescm(scmcon *conp, scmtab *tabp, scmkva *deld)

This function performs an SQL delete operation on a row from the table
specified by "tabp" over the database connection "conp". The value of
the columns to be deleted is specified using the same structure as in
insertscm(), above.

2.1.14 err_code searchscm(scmcon *conp, scmtab *tabp, scmsrcha *srch,
                          sqlcountfunc *cnter, sqlvaluefunc *valer,
                          int what, char *orderp)

This function performs an SQL SELECT operation on the database table
specified by "tabp" over the database connection "conp". The search
criteria are specified by a data structure pointer of type "scmsrcha"
which is defined as follows:

    typedef struct _scmsrcha
    {
      scmsrch  *vec;
      char     *sname;
      int       ntot;
      int       nused;
      int       vald;
      scmkva   *where;
      char     *wherestr;
      void     *context;
    } scmsrcha;

In specifying a search there are two items of importance: what is displayed
if the search succeeds, and what criteria are used to match items in the
search (the latter is the WHERE clause in SQL terminology).  The set of
items to be returned is given in the array "vec" of data structures of type
"scmsrch" which is defined as follows:

    typedef struct _scmsrch
    {
      int       colno;
      int       sqltype;
      char     *colname;
      void     *valptr;
      unsigned  valsize;
      int       avalsize;
    } scmsrch;

The "colno" element in an incrementing value which should begin at 1 for the
first element in the "vec" array and be incremented for each subsequent element.
"colno" is not in an way related to the absolute column number in the table.
"sqltype" is an SQL data type identifier, defined in <sql.h>.  Typical values
are SQL_C_ULONG and SQL_C_CHAR.  "colname" is the name of the column to be
displayed, and "valptr" is an opaque pointer to where the value of that column
will go. There must be at least "valsize" bytes of storage at that location
to hold the results. The actual size of the results will be set in "avalsize".

In the scmsrcha structure "sname" represents an arbitrary user-defined name
that can be applied to the search. This name is for the user's use exclusively
and does not effect the SQL statement that is generated. "ntot" and "nused"
define, respectively the total length of the "vec" array and the number of
elements of that array that are actually used. "vald", as in insertscm()
indicates whether or not the column names in "vec" have previously been
validated.

The actual match criteria are specified in "where" which is a structure
pointer of type scmkva as described in insertscm(). In addition to these
column-based matching criteria it is also possible to specify a match
criteria explicitly using "wherestr". This can be used, for example to
support other forms of boolean comparison operations supported by SQL,
such as < and > (while "where", of course, only searches based on =
comparisons).  Note that if both "where" and "wherestr" are specified the
resulting SQL WHERE clause is an AND of the two conditions.

Once the searchscm() function has executed it will have 0 or more rows
of matching data.  This data can be processed by one of two callback functions.
If the user desires to only obtain a count of the number of rows that
matched the search criteria, then the "cnter" callback function should be
specified. The signature for this function is:

     err_code sqlcountfunc(scmcon *conp, scmsrcha *s, int cnt);

It is called with the connection parameter "conp", the search parameter "s"
(with the matching results filled in, of course) and also a total count
of the number of matching rows.  If the callback function wishes to communicate
back with the function that called searchscm() it may used the "context"
pointer of the scmsrcha data structure. This pointer is a user-defined opaque
pointer that can be used as a communication mechanism between the callbacks
and the calling function (it may be NULL if no such data passing will be used).

If the caller of the searchscm() function is actually interested in results,
the callback function "valer" should be specified. This function will then
be called for each row that matches the search criteria. The signature for
this callback function is:

    err_code sqlvaluefunc(scmcon *conp, scmsrcha *s, int idx);

The first two arguments are the same as with the count callback function.
The third argument is a 0-based index indicating which row of the total
set of rows is being passed to the value callback. Thus, if there are five
matching rows the value function will be called five times with "idx" set
respectively to 0, 1, 2, 3 and then 4.

The next member in the scmsrcha data structure is the "what" element.
This element is a bitfield of how to perform the search.  This is an OR of
one or more of the following flags:

       SCM_SRCH_DOCOUNT

This flag indicates that the count function should be called.

       SCM_SRCH_DOVALUE_ANN

This flag indicates that the value function should be called if all the
requested columns have non-NULL values.

       SCM_SRCH_DOVALUE_SNN

This flag indicates that the value function should be called if at least one
of the requested columns has a non-NULL value.

       SCM_SRCH_DOVALUE_ALWAYS

This flag indicates that the value function should always be called.

       SCM_SRCH_BREAK_CERR

If this flag is set, and the count function returns an error code, the searchscm()
function will not call the value function (if specified). Note that if both the
count and value function callbacks are specified, the count callback is always
called first, before the value callback is ever called.

       SCM_SRCH_BREAK_VERR

If this flag is set, and the value function returns an error when processing
any row, it will not be called to process any subsequent rows.

       SCM_SRCH_DO_JOIN

If this flag is set and a search is being perform on any of the tables that
have a directory id member in common with th directory table (which includes
the certificate, CRL and ROA tables), then an SQL JOIN will be performed with
the directory table. This flag should only be set if the directory id member
(dir_id) is one of the columns in the search or display criteria.

"orderp" is the last member in scmsrcha.  It is the order-by clause of a sql
select statement.

2.1.15 scmsrcha *newsrchscm(char *name, int leen, int cleen);

This utility routine can be used to initialize a scmsrcha pointer.
"name" is the user-defined name for this search, which can be NULL.
"leen" is the number of entries in the "vec" array to allocate.
"cleen" is the number of bytes to allocate for "context", which affects data
passing between searchscm() and the callback functions passed to it.
TODO explain "includeWhereStr" here.
On success this function returns a non-NULL pointer to a new search
structure. On failure it returns NULL.

2.1.16 int addcolsrchscm(scmsrcha *srch, char *colname, int sqltype,
	                 unsigned valsize)

This utility function is used in conjunction with "newsrchscm". It is used
to add a column to the "vec" search array. "srch" is the previously allocated
scmsrcha structure, "colname" is the name of the column to add, "sqltype"
is its SQL type, and "valsize" is the size of the "valptr" byte array to
be allocated to hold the result.

2.1.17 void freesrchscm(scmsrcha *srch)

This utility function is used to free all memory allocated by the "newsrchscm"
and "addcolsrchscm" functions.

2.1.18 char *makedsnscm(char *pref, char *db, char *usr, char *pass)

This utility function is used to create a DSN name given a DSN prefix "pref"
a database name "db" a user name "usr" and an optional password "pass". All
parameters other than "pass" must be non-NULL. On success the fully composed
DSN name is returned. On failure NULL is return.

2.1.19 char *hexify(int blen, void *barr, int useox)

This utility routine is used to create a string appropriate for operations
on an SQL column that has a binary BLOB type. Given a byte array at "barr"
of length "blen" this function will create the appropriate string representation.
If the third argument "useox" is non-zero, the string created will be prefixed
with 0x; if it is zero then this prefix will be omitted.  On success this function
returns that representation; on failure it returns NULL.

2.2 High level database functions

2.2.1 err_code add_object(scm *scmp, scmcon *conp, char *outfile,
                          char *outdir, char *outfull, int utrust)

This function is used to add an arbitrary object (certificate, CRL or ROA)
into the database. "scmp" is the database schema object returned by initscm();
"conp" is a connection to the database. The object will be stored in the file
named "outfile", which should be the last component of the absolute pathname
to the file. "outfull" stores the full absolute path to the file and "outdir"
stores the directory component of the absolute pathname. None of "outfile"
"outdir" or "outfull" is permitted to be NULL. "utrust" is a value that should
be set to 1 if the user wishes to provide an indicate that this object is a
trusted certificate, which must be self-signed. If "utrust" is 0 then this
function performs a heuristic test to determine if the object is a trust anchor
certificate.

2.2.2 err_code delete_object(scm *scmp, scmcon *conp, char *outfile,
                             char *outdir, char *outfull)

This function is used to delete an object from the database. Its arguments are
the same as those of add_object(). Note that it is not an error to delete something
that is not present in the database.

2.2.3 err_code findorcreatedir(scm *scmp, scmcon *conp, scmtab *mtab,
                               char *dirname, unsigned int *idp)

This function is used to find or create a directory in the directory table,
or create one if it is not already present. "scmp" and "conp" are the usual
schema and connection pointers, respectively; mtab is a pointer to the database
table named METADATA and "dirname" is the name of the directory to be found or
added.  mtab and dirname may not be NULL. If the operation succeeds then 0 is
returned, and the directory id of the directory is returned in "idp". If the
operation fails then a negative error code, defined in err.h, is returned.

2.2.4 err_code iterate_crl(scm *scmp, scmcon *conp, crlfunc *cfunc)

This function is used to iterate over all CRLs in the database and perform
the revocations implied by their issuer/aki/serial-number lists. "scmp" and
"conp" are the usual schema and connection pointers; cfunc is a callback
function that is called to process each individual revocation. The function
signature for this callback is:

    typedef err_code crlfunc(scm *scmp, scmcon *conp, char *issuer,
                             char *aki, unsigned long long sn)

In almost every case, the global function revoke_cert_by_serial()
should be used as the "cfunc" argument to iterate_crl.

2.2.5 err_code certificate_validity(scm *scmp, scmcon *conp)

This function is used to iterate over all certificates in the database and
expire those whose notAfter date is in the part. "scmp" and "conp" are the
usual schema and database pointers.

2.2.6 char *retrieve_tdir(scm *scmp, scmcon *conp, err_code *stap)

This utility function is used to retrieve the name for the repository root
directory from the database. "scmp" and "conp" are the usual schema and
connection pointers. On success the name of this directory is returned and
"stap" is set to 0. On failure NULL is returned, and stap is set to one
of the negative error codes defined in err.h. Note that this function returns
allocated memory on success; it is the responsibility of the caller to free it.

2.2.7 void startSyslog(char *appName)

This utility function is used to turn on syslogging with the application
name "appName".

2.2.8 void stopSyslog(void)

This utility function is used to turn off syslogging.

2.2.9 void *roa_parent(scm *scmp, scmcon *conp, char *ski,
                       char *fn, err_code *stap)

This utility function is used to look up the end-entity certificate that
signed a ROA.  "ski" denotes the SKI contained within the ROA. "scmp" and
"conp" are the usual schema and connection pointers. On success this function
returns an X509 pointer (cast to a void * for convenience), writes the
full pathname of the underlying certificate file to the buffer of size
PATH_LEN at "fn" (if non-NULL), and sets "stap" to zero.  On failure
NULL is returned and "stap" is set to a negative error code defined in
err.h.

2.3 OpenSSL utility functions

2.3.1 char *LocalTimeToDBTime(int *stap)

This function is used to obtain the local time and then convert it to a form
that is suitable for insertion into the database. On success "stap" will be
set to 0 and a string returned containing that converted time. On failure NULL
will be returned and stap will be set to a negative error code defined in err.h.
Note that is this function succeeds it returns allocated memory that must be
freed by the caller.

2.3.2 cert_fields *cert2fields(char *fname, char *fullname, object_type typ,
                               X509 **xp, err_code *stap, int *x509stap)

This function is used to tear apart an X509 certificate, obtained either from
a file or from OpenSSL, and place the fields of interest to the database in a
struct pointer of type "cert_fields". If both "fname" or "fullname" is non-NULL
then the certificate is read from that file ("fname" is the file part of the
filename, while "fullname" is the full absolute path of the file). "typ" is
the type of file that should be read.  It should have one of the values OT_CER,
OT_CERPEM, OT_CRL, OT_CRL_PEM, OT_ROA or OT_ROA_PEM (defined in sqhl.h). If
both "fname" and "fullname" are NULL then "xp" should be a pointer to a previously
read X509 data structure obtained from the OpenSSL library.

On success a non-NULL cert_fields pointer is returned; if *xp was specified as
NULL then additionally xp is now set to point to an X509 data structure. Finally
"stap" and "x509stap" are set to zero. On failure NULL is returned, and "stap"
set to a negative error code. Note that if "stap" as the value ERR_SCM_X509
then "x509stap" may contain additional error information. Note, however, that
X509 style error codes are all positive numbers greater than one.

The cert_fields structure contains an array of "fields" members whose array
indices (e.g. CF_FIELD_SKI, CF_FIELD_ISSUER) are defined as manifest constants
in sqhl.h. It also contains a "flags" structure member that holds the certificate
flags that might have already been defined.  Currently only SCM_FLAG_CA, indicating
that the certificate is a CA certificate, could have already been set. The data
structure also contains members "ipb" and "ipblen" which contain the RFC3779
extension information, and its length, in raw ASN.1 format.  Other structure
members of cert_fields should be opaque to the user and not used.

2.3.3 void freecf(cert_fields *)

This function is used to free all the memory allocated by a call to the
cert2fields() function.

2.3.4 crl_fields *crl2fields(char *fname, char *fullname, object_type typ,
                             X509_CRL **xp, err_code *stap, int *crlstap)

This function does for CRLs what cert2fields() does for certificates. It
extracts those fields in a CRL that are meaningful for database insert. The
semantics of the arguments to this function are identical to those for the
cert2fields() function.

The crl_fields data structure contains an array of "fields" members, the
members of which are indexed by manifest constants (e.g. CRF_FIELD_SN) defined
in sqhl.h.  This data structure also contains a field "snlist" which is an
array of long long integer values containing the serial numbers in the CRL;
the length of this list (in elements) is defined by the data structure member
"snlen". Other fields in the data structure are intended to be opaque and
should not be used.

On success this function returns a non-NULL crl_fields pointer, and potentially
sets "xp" to point to an X509_CRL data structure if "fname" and "fullname"
were both specified; "stap" and "crlstap" are also set to 0 on success. On failure
NULL is returned, and stap is set to indicate the error. If stap is ERR_SCM_X509
then "crlstap" may contain additional information in the form of an X509 error
code.

2.3.5 void freecrf(crl_fields *)

This function is used to free all the memory allocated by crl2fields().

2.4 ROA utility functions

2.4.1 err_code roaFromConfig(char *fname, int doval, struct ROA** rp)

This function reads the file at "fname" and parses it.  Presuming the file
represents a ROA in syntactically correct OpenSSL conf file format,
the function will allocate space for and return a ROA structure at the
location pointed to by "rp".

On success this function returns 0; on failure it returns a negative
error code.

The non-NULL return from this function is allocated memory that
must be freed by a call to roaFree().

2.4.2 int roaToConfig(struct ROA* r, char *fname)

This function is the inverse of the previous function.  The ROA
defined by "r" is written to the file named "fname" using the standard
conf file format (paired KEY= VALUE statements)

On success this function returns 0; on failure it returns a negative
error code.

This function is optional and may not be implemented in the delivered
version.

2.4.3 err_code roaFromFile(char *fname, int fmt, int doval, struct ROA **rp);

This is a more generalized function for similar purposes.  It
reads in a ROA from a file and potentially perform validation.
"fname" is the name of the file containing the putative ROA.
If "fmt" is 0 this function attempts to intuit the file format
based on the first CR or LF delimited line in the file and also
the filename; if "fmt" is non-zero then it is an OpenSSL enum value
specifying the file format (binary DER or PEM encoded DER).

If "doval" is any nonzero value then the ROA will also be syntactically
validated using all steps that do not require access to the database;
if "doval" is 0 only ASN.1 validation will be performed.

On success a ROA data structure, as defined in roa.h, is returned
and errp is set to 0.  On failure NULL is returned and errp is
set to a negative error code.

The non-NULL return from this function is allocated memory that
must be freed by a call to roaFree().

2.4.4 err_code roaToFile(struct ROA *r, char *fname, int fmt)

This function is the inverse of the previous function.  The ROA
defined by "r" is written to the file named "fname" using the format
"fmt".  If "fmt" is 0 the output form is the default (PEM encoded DER).

On success this function returns 0; on failure it returns a negative
error code.

2.4.5 err_code roaGenerateFilter(struct ROA *r, X509 *cert, FILE *fp)

This function is used to create BGP filter tables from a ROA and its
certificate.  The contents of "r" and "cert" are examined, the AS-number
and IP-address associations are extracted, and the result is appended
to the file "fp".  Note that this function may produce an non-negative
number of lines of output (including zero).

On success this function returns 0; on failure it returns a negative
error code.

2.4.6 unsigned char *roaSKI(struct ROA *r)

This utility function extracts the SKI from a ROA and formats it in
the canonical ASCII format hex:hex:...:hex, suitable for use in DB
lookups.  On failure this function returns NULL.

Note that this function returns a pointer to allocated memory that
must be free()d by the caller.

2.4.7 unsigned char *roaSignature(struct ROA *r, int *lenp);

This utility function extracts the binary signature from the ROA
and returns a pointer to it. It additional sets the (binary) length
of the data pointed to in "lenp". It is the responsibility of the
caller to convert the binary data into an alternate form, if desired.
On failure this function returns NULL.

2.4.8 int roaValidate(struct ROA *r);

This function performs all validations steps on a ROA that do not
require database access.  On success it returns 0; on failure, it
returns a negative error code.

2.4.9 int roaValidate2(struct ROA *r, X509 *x)

This function performs all validations steps on a ROA that require
an X509 certificate to have been fetched from the database. It returns 0
on success and a negative error code on failure. It is assumed that this
function is called as follows:

      scmcon *conp; // previously opened DB connection
      X509   *cert;
      char   *ski;
      int     valid = -1;
      int     sta;

      sta = roaValidate(r);
      if ( sta == 0 ) {
        ski = roaSKI(r);
	if ( ski != NULL ) {
	  cert = find_certificate(conp, ski, NULL, NULL, &sta);
	  if ( cert != NULL && sta == 0 ) {
            valid = roaValidate2(r, cert);
          }
        }
      }

2.4.10 void roaFree(struct ROA *r)

This function frees all memory allocated when "r" was created. It
is permissible for "r" to be NULL, in which case nothing happens.
If "r" is non-NULL, however, it must point to a syntactically valid
ROA structure (which need not have been semantically validated, however).

2.5 ASN.1 utility functions

The ASN.1 utility functions are documented in Unix man format in the
files asn_gen.1 and casn_functions.3.  The DIAGNOSTICS section of the latter
document may be particularly helpful in locating the source of problems.

2.6 Other utility functions

2.6.1 int isadir(char *indir)

This function returns 1 if "indir" is a directory, 0 if it is not a
directory, and a negative error code defined in err.h on any error.

2.6.2 err_code splitdf(char *dirprefix, char *dirname, char *fname,
                       char **outdir, char **outfile, char **outfull)

This function is responsible for converting an arbitrary filename
directory name combination into an absolute path, as well as splitting
that absolute path into its directory and file components. The directory
part of the input consists of a (possibly NULL) prefix "dirprefix" and
a (possibly NULL) directory name "dirname". The file part of the input
consists of the relative or absolute pathname "fname", which must not
be NULL.  "fname" can contain arbitrary directory constructs such as
"." and "..".

The function produces a full absolute pathname in "outfull" as well
as the directory part of that absolute pathname in "outdir" and the
file part of the absolute pathname in "outfile".

2.6.3 err_code isokfile(char *fname)

This function returns 0 if the indicated file is a regular file
(symlinks, sockets, pipes and device files are not considered to
be regular, but hard links are). On error it returns a negative
error code in err.h.

2.6.4 char *r2adir(char *indir)

This function attempts to convert the (possibly relative) pathname
to a directory "indir" into an absolute pathname. On success it returns
the absolute pathname (in allocated memory that must be freed by the
caller), On failure it returns NULL.

2.6.5 char *err2string(int err)

This function returns an error string corresponding to an error code
defined in err.h. The returned value is static memory which must not
be modified or freed. If "err" is not an error code defined in err.h
it returns NULL.

2.7 Other tools

   The doc directory contains instructions for several other programs:

      make_roa.1 for making ROAs

      make_manifest.1 for making manifests

      make_oidtable for making a table of OBJECT IDENTIFIERS

      rsync_aur.1 for running the rsync_aur program
