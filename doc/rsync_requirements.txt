Parallel rsync is the rpstir component that fetches data from rsync URIs.

= Top-level Requirements =

1. Availability. Remote repositories should not be allowed to take up too much local resources.

2. Speed. Updating the local cache from all repositories should happen as quickly as reasonably possible.  ?? This is vague.  Tie this into 4-hour cycle (from DB schema requirements)

3. Durability. A failed download or system crash should be recoverable.

4. Intra-directory integrity. Each directory fetched from a remote URI should be in a consistent state if possible.  ?? This requires context.

5. Inter-directory integrity. Remote repositories should not be allowed to interfere with other remote repositories.

6. System integrity. Remote repositories should not be allowed to gain access to the local system.

7. Audit.  Ability to log RPKI repository failures and changes.  E.g. Would we be able to go back and find evidence of DNS cache poisoning?

8. Detect and respond to failures to access RPKI respositories (should this feature be preserved across crashes?)

= Derived Requirements =

1. (T1 and T2) Concurrency. Multiple downloads should happen in parallel so one slow download doesn't slow down the entire fetch process or prevent any subsequent fetches from running.

2. (T2 and T3) Partial recovery. Only tasks that were in progress during a crash should need to be recovered; recovery should not require re-downloading everything from all remote repositories.

3. (T4) Multiple fetches. More than one fetch may be required per directory in order to verify that directory contents did not change in the middle of one or both of the transfers.

4. (T5 and T6) URI normalizing or filtering. URIs containing the relative path reference `..', or any characters with special meanings that may affect local security must be normalized or filtered before use.

5. (T1 and T2) URI blacklisting. There should be a way to temporarily or permanently blacklist URIs that interfere with normal operation, e.g. by sending gibberish data very slowly or by sending many invalid files.

6. Support for configurable limits on download time/disk usage.
