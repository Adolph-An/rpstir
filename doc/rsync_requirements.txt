Parallel rsync is the rpstir component that fetches data from rsync URIs.


= Assumptions =

1. Network-bound update. Updating a RPSTIR cache from remote repositories is primarily network intensive and other system resources are secondary.


= Top-level Requirements =

1. Availability. Remote repositories should not be allowed to take up too much local resources.

2. Bounded run time. Each complete update from all available remote repositories should finish and be committed to the RPSTIR system in less than 4 hours.

3. Durability. A failed download or system crash should be recoverable.

4. Intra-directory integrity. It is possible for rsync to fetch a directory while it's in the middle of being updated on the remote end. This can result in failed directory integrity checks in later parts of RPSTIR. If possible, steps should be taken such that each directory fetched from a remote URI is in a consistent state

5. Inter-directory integrity. Remote repositories should not be allowed to interfere with other remote repositories.

6. System integrity. Remote repositories should not be allowed to gain access to the local system.

7. Audit.  Ability to log RPKI repository failures and changes.  E.g. Would we be able to go back and find evidence of DNS cache poisoning?

8. Partial success. Remote repositories may not always be available. RPSTIR needs to continue running as much as possible when some repositories are unavailable.

9. Completion indication. There must be a way to determine when RPSTIR's cache is completely up to date with all remote repositories as much as possible for each update cycle.


= Derived Requirements =

1. (T1 and T2) Network concurrency. Multiple downloads should happen in parallel so one slow download doesn't slow down the entire fetch process or prevent any subsequent fetches from running.

2. (A1 and T2) Component/resource concurrency. Memory-, disk-, and CPU-bound activities should run in parallel with network-bound downloads.

3. (T2, T3, and T8) Partial recovery. Only tasks that were in progress during a crash should need to be recovered; recovery should not require re-downloading everything from all remote repositories.

4. (T4) Multiple fetches. More than one fetch may be required per directory in order to verify that directory contents did not change in the middle of one or both of the transfers.

5. (T5 and T6) URI normalizing or filtering. URIs containing the relative path reference `..', or any characters with special meanings that may affect local security must be normalized or filtered before use.

6. (T1 and T2) URI blacklisting. There should be a way to temporarily or permanently blacklist URIs that interfere with normal operation, e.g. by sending gibberish data very slowly or by sending many invalid files.

7. (T1, T2, and T8) Retries. Failed downloads should be retried. The time between retries and the number of retries before giving up should be configurable.

8. (T1 and T2) Support for configurable limits on download time/disk usage.

9. (T9) Single-cycle execution. Parallel rsync should run for one cycle and exit. It can be invoked again for the next cycle.

10. (T9, D2, D3) Completion responsibility. Parallel rsync is responsible for not indicating its own completion (see D9) until the other components of rpstir have completed updating everything that follows from the new downloads from remote repositories. This implicitly does not include components that are time-driven instead of update-driven (e.g. garbage collection and handling expired objects). An exception may be made for optional components such as rpki-rtr.


= Open Questions =

1. (T3, T8, and D7) Does information about which repositories are failing need to be durable or can all repositories be reverted to a clean state on crash and recovery?

2. (T8) Does there need to be a way to communicate to the rest of rpstir that an update failed?
