RR (1)                  USER COMMANDS


NAME

        rr - generate a binary file from a text file

SYNOPSIS

        rr [filename] [-r] [-d]

DESCRIPTION

        This utility allows you to convert a text file that is written in a
        particular  format into a binary file.  If the parameter 'filename'
        is omitted, the program is a simple filter, converting its standard
        input  to its standard output.  If 'filename' is given, the program
        converts 'filename.raw' to 'filename.req'.  If  the  '-r'switch  is
        specified, the program puts into the third and fourth bytes a count
        of the output bytes after  the  fourth.   If  the  '-d'  switch  is
        present, the program assumes that the input file is the result of a
        hex/ASCII output from the 'dump' program and it first converts each
        input  line  to  a  single hex number of up to 32 hex digits before
        doing the processing described below.  The  result  is  that  input
        like

             0  2A03 0068 0000 1234 1ED2 8082 AD18 CAE8   *..h...4........
            10  0000 0057 3055 3031 3022 310B 3009 0603   ...W0U010"1.0...
            20  0AF1 8E0D B05D 38DB E147 7C               .....]8..G|

        is first converted to

            0x2A030068000012341ED28082AD18CAE8
            0x00000057305530313022310B30090603
            0x0AF18E0DB05D38DBE1477C

        This program can then be a direct inverse of 'dump'.

        The input file  may  contain  numbers,  text  strings,  braces  and
        comments.  Comments are designated as in C, i.e. starting with '/*'
        and ending with '*/'.  The text outside of such comments is treated
        in  words,  where  words  are  defined  as  groups  of  consecutive
        non-white-space characters separated by  white  space.   Words  are
        converted depending on their initial character:

            Numbers are words that begin  with  a  decimal  digit.   A  hex
                number  begins  with '0x'; it may have the hex digits above
                '9' in either case.  A hex number is converted to the given
                number  of  whole bytes, e.g. the word '0x012' is converted
                to  two  bytes.   Numbers  not  beginning  with  '0x'   are
                considered  decimal.   A  decimal  number is converted to a
                single byte.

            Text strings begin with quote or apostrophe and end in the same
                character,  e.g.  'This is a text string'.  They are copied
                as is without the delimiters.

            Braces ('{' or '}') are used to define  the  special  structure
                'varfld'  used  in  requests  to  certain peripherals.  The
                braces delimit the word(s) in the structure.

            Certain reserved words  are  used  to  designate  ASN.1-encoded
                items.  These words and their meanings are as follows:

                    Word    Meaning
                    ----    -------
                    boo     Boolean
                    int     Integer
                    bit     Bit string
                    oct     Octet string
                    nul     Null item
                    obj     Object identifier
                    obd     Object descriptor
                    ext     External
                    rea     Real
                    enu     Enumerated
                    num     Numeric string
                    prt     Printable string
                    t61     T61 string
                    vtx     Videotex string
                    ia5     IA5 string
                    utc     UTC time
                    gtm     Generalized time
                    grs     Graphic string
                    vst     Visible string
                    gns     General string
                    seq     Sequence
                    set     Set
                    ctx     Context-specific (see below)
                    app     Application-specific (see below)
                    oth     Other (see below)

                Whenever one of these words is encountered, it is converted
                to the appropriate tag type, followed by a length field and
                then the data, if any, which must be  decimal  numbers,  or
                hex  numbers (indicated by a leading '0x') or text strings.
                Any text string must be enclosed in either quotation  marks
                (") or apostrophes (').  If the quotation symbol, whichever
                is used,  appears  within  the  text  string,  it  must  be
                backslashed,  i.e.  preceded  by  the  '\'  character.  Any
                backslash in the text  string  must  also  be  preceded  by
                another  backslash.  The contents of a constructed item are
                determined by indenting; the item consists of the remainder
                of  that  line  and  all  subsequent lines which have their
                first word further to the right than the word which started
                the item.

                The reserved words 'ctx' and 'app' may be used to  set  the
                high  bits  of  a  tag.  They must be followed immediately,
                i.e.  with no intervening white space, by '0x' and an  even
                number of hex digits, e.g. ctx+0x20 indicates a constructed
                context-specific item tagged zero.  The reserved word 'oth'
                may  be used to define an ASN.1 tag that does not appear in
                the list of reserved words.  The next word after 'oth' must
                be the value of the tag, which may have any number of bytes
                in accordance  with  the  rules  of  ASN.1.   The  tag  may
                indicate  a  primitive  or a constructed item, depending if
                the first byte has a 0x20 bit.

            The words 'sth' and 'md2' are also reserved.  They can be  used
                to insert a hash of part of the material.  The former marks
                the start of an ASN.1 item  which  is  to  be  hashed;  the
                latter creates the hash.  If 'sth' is omitted, the 'md2' is
                translated to create the  MD2  hash  of  the  second  ASN.1
                sequence that has been defined so far.  This is presumed to
                be the ToBeSigned sequence.

            Any other words are disregarded.

        For example, if the program is run with the '-r' switch, the file:

            42
            3
            0x0000
            0x0000
            0x1234
            0x1ed28082ad18cae8
            {
            seq seq seq set seq obj 0x550406
                                prt 'US'
                        set seq obj 0x55040a
                                prt 'Acme Corp.'
                    ctx+0x22
                        set oth 0x9f30 1
                            oth 0x9f31 0x1ff
                seq obj 0x2A864886F70D010102
                    nul
                bit 0x00 md2
            }

        is converted to binary that looks like this in hex:

          Addr               Hex                            ASCII
             0  2A03 0068 0000 1234 1ED2 8082 AD18 CAE8   *..h...4........
            10  0000 0057 3055 3031 3022 310B 3009 0603   ...W0U010"1.0...
            20  5504 0613 0255 5331 1330 1106 0355 040A   U....US1.0...U..
            30  130A 4163 6D65 2043 6F72 702E A20B 3109   ..Acme Corp...1.
            40  9F30 0101 9F31 0201 FF30 0D06 092A 8648   .0...1...0...*.H
            50  86F7 0D01 0102 0500 0311 0005 C5F0 B671   ...............q
            60  0AF1 8E0D B05D 38DB E147 7C               .....]8..G|


        Another example, using 'sth' is as follows:

            ctx+0x20
                seq sth
                    seq seq set seq obj 0x550406
                                    prt 'US'
                            set seq obj 0x55040a
                                    prt 'Acme Corp.'
                        ctx+0x22
                            set oth 0x9f30 1
                                oth 0x9f31 0x1ff
                    seq obj 0x2A864886F70D010102
                        nul
                    bit 0x00 md2

        which is converted to binary that looks like this in hex:

             0  A057 3055 3031 3022 310B 3009 0603 5504   .W0U010"1.0...U.
            10  0613 0255 5331 1330 1106 0355 040A 130A   ...US1.0...U....
            20  4163 6D65 2043 6F72 702E A20B 3109 9F30   Acme Corp...1..0
            30  0101 9F31 0201 FF30 0D06 092A 8648 86F7   ...1...0...*.H..
            40  0D01 0102 0500 0311 0005 C5F0 B671 0AF1   .............q..
            50  8E0D B05D 38DB E147 7C                    ...]8..G|

        Note that the 'sth' precedes and is at the same  indenting  as  the
        the object to be hashed.
