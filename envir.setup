#!/bin/sh
#

# Sets up the environment variables for the RPKI relying party system,
# but allows the user to override by setting existing variables.
#
# This file should NOT be executed on its own.  It should be imported
# at the beginning of another script using "source" or ". ".  It is
# useless to execute this file standalone, since "export" can only
# affect the environment of child processes, not parent processes.
#
# Example:
# # set environment variables if not set
# THIS_SCRIPT_DIR=$(dirname $0)
# . $THIS_SCRIPT_DIR/../envir.setup
#

DEFAULT_RPKI_ROOT=${HOME}/rpki  # caller should set RPKI_ROOT
DEFAULT_RPKI_PORT=31416
DEFAULT_RPKI_DB=rpkidb7
DEFAULT_RPKI_DBUSER=rpki
DEFAULT_RPKI_DBPASS=validator
DEFAULT_RPKI_ROOTPASSWORD=password  # for mysql
DEFAULT_RPKI_TCOUNT=24
DEFAULT_RPKI_LISTPORT=31415
DEFAULT_RPKI_DSN=myodbc

if [ "${RPKI_ROOT}x" = "x" ]; then
    echo Warning: RPKI_ROOT not set, defaulting to $DEFAULT_RPKI_ROOT
    export RPKI_ROOT=$DEFAULT_RPKI_ROOT
fi
if [ "${RPKI_DSN}x" = "x" ]; then
    echo Warning: RPKI_DSN not set, defaulting to $DEFAULT_RPKI_DSN
    export RPKI_DSN=$DEFAULT_RPKI_DSN
fi
if [ "${RPKI_TCOUNT}x" = "x" ]; then
    echo Warning: RPKI_TCOUNT not set, defaulting to $DEFAULT_RPKI_TCOUNT
    export RPKI_TCOUNT=$DEFAULT_RPKI_TCOUNT
fi
if [ "${RPKI_LISTPORT}x" = "x" ]; then
    echo Warning: RPKI_LISTPORT not set, defaulting to $DEFAULT_RPKI_LISTPORT
    export RPKI_LISTPORT=$DEFAULT_RPKI_LISTPORT
fi
if [ "${RPKI_PORT}x" = "x" ]; then
    echo Warning: RPKI_PORT not set, defaulting to $DEFAULT_RPKI_PORT
    export RPKI_PORT=$DEFAULT_RPKI_PORT;
fi
if [ "${RPKI_DB}x" = "x" ]; then
    echo Warning: RPKI_DB not set, defaulting to $DEFAULT_RPKI_DB
    export RPKI_DB=$DEFAULT_RPKI_DB;
fi
if [ "${RPKI_DBUSER}x" = "x" ]; then
    echo Warning: RPKI_DBUSER not set, defaulting to $DEFAULT_RPKI_DBUSER
    export RPKI_DBUSER=$DEFAULT_RPKI_DBUSER
fi
if [ "${RPKI_DBPASS}x" = "x" ]; then
    echo Warning: RPKI_DBPASS not set, defaulting to $DEFAULT_RPKI_DBPASS
    export RPKI_DBPASS=$DEFAULT_RPKI_DBPASS
fi
if [ "${RPKI_ROOTPASSWORD}x" = "x" ]; then
    echo Warning: RPKI_ROOTPASSWORD not set, defaulting to $DEFAULT_RPKI_ROOTPASSWORD
    export RPKI_ROOTPASSWORD=$DEFAULT_RPKI_ROOTPASSWORD
fi
if [ "${OIDTABLE}x" = "x" ]; then
    DEFAULT_OIDTABLE="$RPKI_ROOT/cg/oidtable"
    echo "Notice: OIDTABLE not set, defaulting to $DEFAULT_OIDTABLE"
    export OIDTABLE="$DEFAULT_OIDTABLE"
fi


# If mysql acccount needs a password, we must use -p<password> on the
# mysql command line.  If no password, we must omit the option entirely.
if [ "${RPKI_DBPASS}x" = "x" ]; then
    export RPKI_DBPASS_OPTION=
else
    export RPKI_DBPASS_OPTION="-p${RPKI_DBPASS}"
fi

# MySQL command line which reads statements from stdin
export RPKI_MYSQL_CMD="mysql $RPKI_DB -u $RPKI_DBUSER $RPKI_DBPASS_OPTION"

############################################################################
# Shell function for checking return codes for error (swiped from
# http://steve-parker.org/sh/exitcodes.shtml)
#
# Usage:
# grep "^${1}:" /etc/passwd > /dev/null 2>&1
# check_errs $? "User ${1} not found in /etc/passwd"
# USERNAME=`grep "^${1}:" /etc/passwd|cut -d":" -f1`
# check_errs $? "Cut returned an error"
# echo "USERNAME: $USERNAME"
# check_errs $? "echo returned an error - very strange!"
#
# NOTE: DEPRECATED!  Better to use trap_errors at the top of your
# script, which causes an exit and prints script/line number on any
# error.

check_errs()
{
  # Function. Parameter 1 is the return code
  # Para. 2 is text to display on failure.
  if [ "${1}" -ne "0" ]; then
    echo "ERROR # ${1} : ${2}"
    # as a bonus, make our script exit with the right error code.
    exit ${1}
  fi
}

############################################################################

ensure_file_exists ( ) {
    if [ ! -e "$1" ]
    then
	echo "Error: file not found - $1" 1>&2
	exit 1
    fi
}

ensure_dir_exists ( ) {
    if [ ! -d "$1" ]
    then
        echo "Error: directory not found - $1" 1>&2
        exit 1
    fi
}
