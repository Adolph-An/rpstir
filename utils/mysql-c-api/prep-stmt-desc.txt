Notes:
- Client passes DB_CLIENT_FLAG to specify which prepared stmts it wants.
- prep-stmt.c needs both DB_CLIENT_FLAG and DB_CLIENT_PSTMT_SUMMARY to determine
      which stmt to return per request from each function in client-foo.c.
- Client needs to see:
    - connect.h:  enum client_type { DB_CLIENT; };
    - connect.c:  void connectDb();
    - connect.c:  void disconnectDb();
    - prep-stmt.c:  stmtNodesGetStmt();
    - prep-stmt-client.h:  enum prepared_stmts_client { }

    
========== prep-stmt-client.c
stmtsCreateAllClient();


========== prep-stmt.c
public struct stmt_node
    MYSQL_STMT *stmt;
    int client_flags;
    int qry_num;
    struct stmt_node *next;

int stmtNodeCreate(struct stmt_node *node, char *qry);
int stmtNodeDestroy(struct stmt_node *node);
int stmtNodesAddNode(struct stmt_node *head, struct stmt_node *node, int qry_num);
int stmtNodesGetStmt(MYSQL_STMT *stmt, void *connp, int client_type, int qry_num);
int stmtNodesDeleteNode(struct stmt_node *head);


========== client-rtr.c
int getCacheNonce(void *connp, cache_nonce_t *nonce) {
    MYSQL_STMT *stmt;
    ret = stmtNodeGetStmt(stmt, connp, DB_RTR_FLAG, DB_RTR_PSTMT_GET_NONCE);
}


========== connect.c
connect.h:  enum client_type { DB_RTR; };
static void connectMysqlCApi();
    // after connection is made:
    struct stmt_node *head = {NULL, -1, -1, NULL};
    switch (client_flags)
    case DB_RTR:
        stmtNodesCreateAllRtr(head)
    // put head into connp to return to client
void connectDb();
void connectDbDefault();
void disconnectDb();


========== util.c
int getStringByFieldname();
