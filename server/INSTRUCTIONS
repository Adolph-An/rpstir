
This directory contains an implementation of the RPKI-RTR server
specifications given in the document "The RPKI/Router Protocol" at
http://www.ietf.org/id/draft-ymbk-rpki-rtr-protocol-04.txt
It also contains an implementation of a sample client, but this client
only prints out the data received; a real client would add this data
to the router.

On the server side, there are two applications to execute:

(1) doUpdate - This application is executed as part of the standard
cycle of operations performed at a local cache.  It should be the last
operation in the cycle, after the rsync, chaser, and garbage collector
have all been run.  It does all the time-consuming steps required to
determine what data to send clients and writes this into the database.

(2) server - This application takes client requests and returns the
data requested.  In its standard mode (that given in the specifications),
the server is run as a subsystem of ssh, which means that sshd is
the one listening for client connection requests and starts an
instance of the server application to service the client.  We do provide
a second mode, where the server application listens directly for
client requests (using the ssh protocol but on a port different from
the standard ssh port) and implements the ssh protocol to reply to
these requests.  Currently, the standard mode is preferable not just
because it implements the specifications but also because the
alternate mode does not do any authentication of the client (while
the standard mode inherits the standard ssh authentication).

On the client side, there is a sample application called testClient
that serves as a model for how to implement clients (as well as
providing a way to test the server side code).  This application can
be executed in two modes, illustrating the two different ways to
implement a client.  The first mode is as a standalone application,
implementing the SSH protocol (by making calls to the cryptlib library)
to talk to the server.  In the second mode, the client forks off
a child process that runs the ssh client, and all communication with
the server is via two pipes to this child process.

The command line for running doUpdate is:
doUpdate <stalenessSpecsFile>
The stalenessSpecsFile should be in the same format as given in
the file proto/sampleQuerySpecs and tells which types of staleness
prevents a ROA from being considered valid and which do not.
The two environment variables that affect the application are:
APKI_DB - determines the name of the database, defaults to APKI
RTR_RETENTION_HOURS - determines how long to hold old incremental updates,
  defaults to 96 (and should always be at least 24 + the maximum time
  between runs of doUpdate)

The command line for running server is:
server [-s] [-l logfile] [-p port]
  where the flags signify
-s: standalone (i.e., in the alternate mode, not as a ssh subsystem)
-p: port to use, only used in standalone mode when the port should be
    different from the standard ssh port, default is 7455
-l: all textual output is recorded to a log file, whose default name is
    log.rtr.server

The command line for running testClient is:
testClient [-s] [-h host] [-p port]
  where the flags signify
-s: standalone, by default it operates instead in the mode where a ssh
    client is forked
-h: the host where the server is, by default localhost
-p: port the server is using, only used in standalone mode (in other mode,
    the port must be the standard ssh port 22), by default 22

