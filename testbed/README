
RPKI Testbed, Repository Construction Library


################################################
#
# Level 0: File Creation and Modification Tools
#
################################################


Certificates
------------

Certificates in the RPKI are defined by the X.509 PKIX Resource
Certificate Profile (draft-ietf-sidr-res-certs).  The low-level
certificate creation tool must allow the following properties to be
specified:

* outputfilename=[string] - The path/name of the file to be written.

* parentcertfile=[string] - The path/name of the file containing the
  parent certificate.  Any field generated from this parameter can be
  overriden by a more specific parameter below.

* parentkeyfile=[string] - The path/name of the file containing the
  parent's key pair.  Any field generated from this parameter can be
  overriden by a more specific parameter below.
  
* subjectkeyfile=[string] - The path/name of the file containing the
  subject's key pair.  Any field generated from this parameter can be
  overriden by a more specific parameter below.
  
* type=[choice of string] - "CA" or "EE".  This affects the fields
  BasicConstraints, KeyUsage, and ExtendedKeyUsage.

* serial=[integer] - Serial Number of the Certificate.  Not to be
  confused with the serial number(s) in the issuer/subject name.

* issuer=[PrintableString plus optional PrintableString] - Issuer's
  commonName and (optionally) serialNumber attribute, separated by the
  percent sign (%).  For example "Gollum", or "Bilbo Baggins%135AX79".
  The commonName field is the ASN.1 type DirectoryString but its
  subtype is required to be PrintableString by the certificate
  profile. The serialNumber attribute must be a PrintableString.  Note
  that this serialNumber is not the same as the certificate serial
  number above.  See http://tools.ietf.org/html/rfc5280#appendix-A.1

* subject=[PrintableString plus optional PrintableString] - Subject's
  commonName and (optionally) serialNumber attribute, separated by the
  percent sign (%). See "issuer" definition.

* notbefore=[string] - Either a UTCTime ("YYMMDDHHMMSSZ") or a
  GeneralizedTime ("YYYYMMDDHHMMSSZ").  Note: RFC5280 requires a
  switch in notation type at the year 2050.  The reason is that with
  UTCTime, if YY >= 50, then it is interpreted as the year 19YY.  The
  certification creation tool is NOT required to check for this.

* notafter=[string] - Either a UTCTime ("YYMMDDHHMMSSZ") or a
  GeneralizedTime ("YYYYMMDDHHMMSSZ").  See note on notbefore.

* pubkey=[comma-separated pair of hex integers "0xXX,0xYY"] - Subject
  Public Key Info.  Currently, RSA is the only allowed algorithm for
  the RPKI, so the public key information is defined as modulus
  followed by publicExponent.  See
  http://tools.ietf.org/html/rfc3279#section-2.3.1

* ski=[hex integer] - Subject Key Identifier, as a 160-bit SHA-1 hash
  of the subject public key.  Hex integers will begin with "0x".

* aki=[hex integer] - Authority Key Identifier, as a 160-bit SHA-1
  hash of the issuer public key.  Hex integers will begin with "0x".

* crldp=[comma-separated ASCII strings] - CRL Distribution Point(s).
  Note: This means we are disallowing commas in URIs.  (I believe this
  restriction is reasonable. A comma is technically allowed in URLs,
  but on many filesystems it is not allowed as a filename character.
  -Andrew)

* aia=[ASCII string] - Authority Information Access.  This is a single
  URI.  Commas are disallowed.  Note that self-signed certificate omit
  this field.

* sia=[comma-separated ASCII strings] - Subject Information Access.
  This represents several URIs which represent different ways of
  accessing the same directory of objects issued by this CA.  Commas
  are disallowed in the URIs.  Three different accessMethod OIDs are
  allowed, depending on the type of certificate:
    . id-ad-caRepository - indicated by ASCII string "r:<URI>"
    . id-ad-signedObject - indicated by ASCII string "s:<URI>"
    . id-ad-rpkiManifest - indicated by ASCII string "m:<URI>"
  For example, "r:rsync://foo.com/mydir/,m:rsync://foo.com/mydir/manifest.mft".
  We intentionally do not support multi-use EE's, which would use an
  accessMethod of id-ad-signedObjectRepository.  See
  http://tools.ietf.org/html/draft-ietf-sidr-res-certs-19#section-4.9.8

* ipv4=[comma-separated strings] - IPv4 Resources.  Each item will be
  either a prefix or a dash-separated range: e.g. "1.0.0.0/8" or
  "1.0.0.1-1.0.0.2".  Full example would be
  "0.0.0.0/32,1.0.0.0/8,1.0.0.1-1.0.0.2".  Alternatively, the string
  "inherit" means to encode the bits indicating that this certificate
  inherits all IPv4 resources from its parent.

* ipv6=[comma-separated strings] - IPv6 Resources.  Each item will be
  either a prefix or a dash-separated range: e.g. "2:BEEF::/32" or
  "2::-2:BEEF::".  Full example would be "2:BEEF::/32,2::-2:BEEF::".
  Alternatively, the string "inherit" means to encode the bits
  indicating that this certificate inherits all IPv6 resources from
  its parent.

* as=[comma-separated strings] - AS Number Resources.  Each item will
  be either a single AS Number or a range: e.g. "23" or "65590-65594".
  Full example would be "1,3,5-9,65590-65594".  Alternatively, the
  string "inherit" means to encode the bits indicating that this
  certificate inherits all AS resources from its parent.

* signatureValue=[hex integer] - Signature Value.  Note that this is
  actually a bit string (RFC 5280), but RSA signature lengths are
  always multiples of 8 bits.  Hex integers will begin with "0x".

References:
http://datatracker.ietf.org/doc/draft-ietf-sidr-res-certs
http://datatracker.ietf.org/doc/rfc5280
http://datatracker.ietf.org/doc/rfc3779


Certificate Revocation Lists (CRLs)
-----------------------------------

CRLs in the RPKI are defined by the X.509 PKIX Resource Certificate
Profile (draft-ietf-sidr-res-certs).  The low-level CRL creation tool
must allow the following properties to be specified:

* outputfilename=[string] - The path/name of the file to be written.

* parentcertfile=[string] - The path/name of the file containing the
  parent certificate.  Any field generated from this parameter can be
  overriden by a more specific parameter below.

* parentkeyfile=[string] - The path/name of the file containing the
  parent's key pair.  Any field generated from this parameter can be
  overriden by a more specific parameter below.
  
* issuer=[PrintableString plus optional PrintableString] - Issuer's
  commonName and (optionally) serialNumber attribute, separated by the
  percent sign (%). See "issuer" definition in Certificates.

* thisupdate=[string] - Either a UTCTime ("YYMMDDHHMMSSZ") or a
  GeneralizedTime ("YYYYMMDDHHMMSSZ").  See note on "notbefore" in
  Certificates.

* nextupdate=[string] - Either a UTCTime ("YYMMDDHHMMSSZ") or a
  GeneralizedTime ("YYYYMMDDHHMMSSZ").  See note on "notbefore" in
  Certificates.

* revokedcertlist=[comma-separated pairs of strings] - Revoked
  Certificate List.  May be empty (no revoked certificates), or may
  have the following fields: serial number and revocation date,
  separated by percent "%".  E.g. "112358%101011102536Z".

* aki=[hex integer] - Authority Key Identifier, as a 160-bit SHA-1
  hash of the issuer public key.  Hex integers will begin with "0x".

* crlnum=[integer] - CRL Number.  Monotonically increasing sequence
  number for a given CRL issuer, allowing users to easily determine
  when a particular CRL supersedes another CRL.  See
  http://tools.ietf.org/html/rfc5280#section-5.2.3 .

* signatureValue=[hex integer] - Signature Value.  Note that this is
  actually a bit string (RFC 5280), but RSA signature lengths are
  always multiples of 8 bits.  Hex integers will begin with "0x".

References:
http://datatracker.ietf.org/doc/draft-ietf-sidr-res-certs
http://datatracker.ietf.org/doc/rfc5280


Route Origin Authorizations (ROAs)
----------------------------------

ROAs in the RPKI are defined by the Profile for Route Origin
Authorizations (draft-ietf-sidr-roa-format).  The low-level CRL
creation tool must allow the following properties to be specified:

* outputfilename=[string] - The path/name of the file to be written.

* eecertfile=[string] - The path/name of the file containing the
  End-Entity (EE) certificate.  Any field generated from this
  parameter can be overriden by a more specific parameter below.

* eekeyfile=[string] - The path/name of the file containing the
  EE certificate's key pair.  Any field generated from this parameter
  can be overriden by a more specific parameter below.

* asid=[integer] - Single AS number (32-bit unsigned integer).

* ipv4=[comma-separated strings or pairs] - The sequence of IPv4
  address prefixes to which the AS is authorized to originate routes.
  Each prefix may optionally be paired with a maxLength value (an
  integer between 0 and 32 inclusive).  The percent "%" delimiter is
  used to separate a prefix from its maxLength.
  E.g. "10.0.0.0/16%24,10.0.255.0/24".

* ipv6=[comma-separated strings or pairs] - The sequence of IPv6
  address prefixes to which the AS is authorized to originate routes.
  Each prefix may optionally be paired with a maxLength value (an
  integer between 0 and 128 inclusive).  The percent "%" delimiter is
  used to separate a prefix from its maxLength.
  E.g. "A00::/16%24,A00:FF00::/24".

References:
http://datatracker.ietf.org/doc/draft-ietf-sidr-roa-format/
http://datatracker.ietf.org/doc/draft-ietf-sidr-signed-object/


Manifests
---------
Manifests in the RPKI are defined by the Manifests for the Resource
Public Key Infrastructure (draft-ietf-sidr-rpki-manifests).  The
low-level Manifest creation tool must allow the following properties
to be specified:

* outputfilename=[string] - The path/name of the file to be written.

* eecertfile=[string] - The path/name of the file containing the
  End-Entity (EE) certificate.  Any field generated from this
  parameter can be overriden by a more specific parameter below.

* eekeyfile=[string] - The path/name of the file containing the
  EE certificate's key pair.  Any field generated from this parameter
  can be overriden by a more specific parameter below.

* thisupdate=[string] - GeneralizedTime ("YYYYMMDDHHMMSSZ").  See note
  on "notbefore" in Certificates.

* nextupdate=[string] - GeneralizedTime ("YYYYMMDDHHMMSSZ").  See note
  on "notbefore" in Certificates.

* manifestnum=[integer] - Manifest Number. Monotonically increasing 
  sequence number for a given Manifest issuer, allowing users to 
  easily determine when a particular Manifest supersedes another
  Manifest.

* filelist=[comma-separated pairs of strings] - Sequence of
  FileAndHash objects. May be empty (no files), or may have the
  following fields: filename, a hexadecimal integer SHA-256 hash of
  the file's contents separated by percent "%".  Note that this means
  we must disallow both commas and percent "%" signs in filenames.
  E.g. "C.cer%0x0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF".

References:
http://datatracker.ietf.org/doc/draft-ietf-sidr-rpki-manifests/
http://datatracker.ietf.org/doc/draft-ietf-sidr-signed-object/
http://datatracker.ietf.org/doc/draft-ietf-sidr-rpki-algs/

######################################################
#
# Level 1: Object Construction (Along w/ Semantics)
#
######################################################



##################################
#
# Level 2: Directory Construction
#
##################################

The repository structure follows the specification in
draft-ietf-sidr-repos-struct-05.  The following excerpt illustrates
the relationships between directory structure and the AIA, SIA, and
CRLDP fields in a certificate.  Note that ROAs and manifests are
omitted from the diagram below.  In addition this testbed does not
support multi-use EE's (hence the EE repository publication point is
simply the URI pointing to the signed-object containing the EE cert,
not a directory as implied below).

   For every Certification Authority (CA) certificate in the RPKI there
   is a corresponding repository publication point that is the
   authoritative publication point for all current certificates and CRLs
   issued by this CA.  For every End-entity (EE) certificate in the RPKI
   there is a repository publication point that holds all current signed
   objects that can be verified via this EE certificate.  In both cases
   certificate's SIA extension contains a URI [RFC3986] that references
   this repository publication point and identifies the repository
   access mechanisms.  Additionally, a certificate's Authority
   Information Access (AIA) extension contains a URI that references the
   authoritative location for the Certification Authority (CA)
   certificate under which the given certificate was issued.

   For example, if the subject of certificate A has issued certificates
   B and C, then the AIA extensions of certificates B and C both point
   to the publication point for the certificate A object, and the SIA
   extension of certificate A points to a repository publication point
   (directory) containing certificates B and C (see Figure 1).

                      +--------+
           +--------->| Cert A |<----+
           |          |  AIA   |     |
           |  +--------- SIA   |     |
           |  |       +--------+     |
           |  |                      |
           |  |  +-------------------|------------------+
           |  |  |                   |                  |
           |  +->|   +--------+      |   +--------+     |
           |     |   | Cert B |      |   | Cert C |     |
           |     |   | CRLDP-------+ |   | CRLDP-----+  |
           +----------- AIA   |    | +----- AIA   |  |  |
                 |   |  SIA------+ |     |  SIA------------+
                 |   +--------+  | |     +--------+  |  |  |
                 |               | V                 V  |  |
                 |               | +-----------------+  |  |
                 |               | | CRL issued by A |  |  |
                 | A's Repository| +-----------------+  |  |
                 | Directory     |                      |  |
                 +---------------|----------------------+  |
                                 |                         |
       +----------------+        |    +----------------+   |
       | B's Repository |<-------+    | C's Repository |<--+
       |  Directory     |             |  Directory     |
       +----------------+             +----------------+

   Figure 1.  Use of AIA and SIA extensions in the RPKI.

   In Figure 1, certificates B and C are issued by (CA) A. Therefore,
   the AIA extensions of certificates B and C point to (certificate) A,
   and the SIA extension of certificate A points to the repository
   publication point of CA A's subordinate products, which includes
   certificates B and C, as well as the CRL issued by A. The CRL
   Distribution Points (CRLDP) extension in certificates B and C both
   point to the Certificate Revocation List (CRL) issued by A.

   In this distributed repository structure an instance of a CA's
   repository publication point contains all published certificates
   issued by that CA, and the CRL issued by that CA.  An End Entity's
   (EE's) repository publication point contains all the published
   objects that are verified via the associated EE certificate.


#######################################
#
# Level 3: Full Hierarchy Construction
#
#######################################
