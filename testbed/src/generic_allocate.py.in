#!@PYTHON@

class AllocationError(Exception):
    """Exception raised for errors in trying to allocate."""
    def __init__(self, msg="Unknown error"):
        self.msg = msg
    def __str__(self):
        return repr(self.msg)

class AllocationInternalError(AllocationError):
    """Exception raised for programming mistakes trying to allocate."""
    
def generic_allocate(free_list, used_list, requests, range_not_prefix=True):
    """Allocate Internet number resources based on a free list.

    Inputs:

    free_list - [list of integer pairs] blocks of unallocated
                resources, e.g. [(3,10), (13,17), ...]

    used_list - [list of integer pairs] blocks of allocated resources,
                e.g. [(11,12), (18,34), ...]

    requests - [list of character/integer pairs] requests for resources,
                where each request block is denoted by a pair (reqtype,
                amount).  The "reqtype" field must be either 'p' (IP
                prefix) or 'r' (IP/AS range).  The "amount" field must
                be a positive integer specifying the number of
                Internet resource numbers to allocate (i.e. IP
                addresses, or AS numbers).  If "reqtype" is 'p', then
                "amount" must be a power of 2. e.g. [('r',5), ('p',
                256), ('r', 16), ...]

    range_not_prefix - [boolean] If set to True (default), returned
                ranges must NOT be expressible as a prefix.  This
                option should be set to True for IPv4/IPv6 allocation,
                and False for AS number allocation.  The default
                behavior conforms to RFC 3779 encoding requirements
                that ranges equivalent to prefixes MUST be expressed
                as prefixes.  Therefore, a "range" request must not
                return a prefix.

    Returns:

    allocated_blocks - [list of integer pairs] blocks allocated to the
                child, corresponding to the order of requests.  Note
                that the blocks MAY NOT be in ascending order of
                resource number.

    Side effects:

    The free_list and used_list will be updated to reflect the blocks
    allocated to the child.

    Exceptions:

    AllocationError - If the request cannot be fulfilled, the function
    raises an AllocationError exception.

    >>> free_list = [[10,50],[60,150]]
    >>> used_list = [[0,9],[51,59]]
    >>> generic_allocate(free_list, used_list, [('r',6),('p',64)])
    [[10, 15], [64, 127]]
    >>> free_list
    [[16, 50], [60, 63], [128, 150]]
    >>> used_list
    [[0, 9], [51, 59], [10, 15], [64, 127]]
    >>> generic_allocate(free_list, used_list, [('r',8)], False) # =prefix ok
    [[16, 23]]
    >>> generic_allocate(free_list, used_list, [('r',8)], True) # =prefix not ok
    [[25, 32]]
    """
    allocated_blocks = []
    for single_request in requests:
        req_type = single_request[0]
        req_amount = single_request[1]
        if req_type == 'r':
            issued_block = allocate_single_range(free_list, req_amount,
                                                 allocated_blocks,
                                                 range_not_prefix)
        elif req_type == 'p':
            issued_block = allocate_single_prefix(free_list, req_amount,
                                                  allocated_blocks)
        else:
            raise AllocationError("Invalid request type: %s" % req_type)
        allocated_blocks.append(issued_block)
    used_list.extend(allocated_blocks)
    return allocated_blocks

def is_prefix(int_pair):
    """Return true if (a,b) are the first/last addresses of a IPv4/6 prefix.

    >>> is_prefix([1,4])
    False
    >>> is_prefix([512,767])
    True
    """
    first = int_pair[0]
    last = int_pair[1]
    num_addr = last - first + 1
    if not is_pow(num_addr, 2):
        return False
    if first % num_addr != 0:
        return False
    return True

def is_pow(n, b):
    """Return true if n is a non-negative integer power of b.

    >>> is_pow(65536, 2)
    True
    >>> is_pow(343, 7)
    True
    >>> is_pow(48, 3)
    False
    >>> is_pow(1, 7)
    True
    """
    if n <= 0:
        return False
    while n > 1:
        if n % b != 0:
            return False
        n = n / b
    return True

def allocate_single_range(free_list, amount, allocated_blocks, no_prefix=True):
    """Returns a range matching the request, updating the free_list.

    >>> free_list = [[13,58],[60,200]]
    >>> allocate_single_range(free_list, 100, [[34,70]])
    [72, 171]
    >>> free_list
    [[13, 58], [60, 71], [172, 200]]
    """
    for i in xrange(len(free_list)):
        x = first_fit_range(free_list[i], amount, allocated_blocks,
                            no_prefix=no_prefix)
        if x is not None:
            perforated = perforate(free_list[i], x)
            free_list[i:(i+1)] = perforated
            return x
    raise AllocationError("Unable to fulfill request for range of size %d" %
                          amount)

def allocate_single_prefix(free_list, amount, allocated_blocks):
    """Returns a prefix matching the request, updating the free_list.

    >>> free_list = [[13,58],[60,200]]
    >>> allocate_single_prefix(free_list, 64, [[34,70]])
    [128, 191]
    >>> free_list
    [[13, 58], [60, 127], [192, 200]]
    """
    if not is_pow(amount, 2):
        raise AllocationError("Illegal prefix amount: %d" % amount)
    for i in xrange(len(free_list)):
        x = first_fit_prefix(free_list[i], amount, allocated_blocks)
        if x is not None:
            perforated = perforate(free_list[i], x)
            free_list[i:(i+1)] = perforated
            return x
    raise AllocationError("Unable to fulfill request for prefix of size %d" %
                          amount)

def perforate(a, b):
    """Returns the set a \ b, as a list of intervals.

    Given interval 'a' which contains interval 'b', return a list of
    intervals that would result from removing interval 'b' from
    interval 'a'.  The returned list contains either 0, 1, or 2
    elements, depending on the placement of 'b' inside 'a'.
    >>> perforate([10,20],[10,20])
    []
    >>> perforate([10,20],[10,10])
    [[11, 20]]
    >>> perforate([10,20],[15,20])
    [[10, 14]]
    >>> perforate([10,20],[11,18])
    [[10, 10], [19, 20]]
    """
    result = []
    if not is_contained(b, a):
        raise AllocationError("Cannot perforate " + expr(b) +
                              " from " + expr(a))
    if b[0] > a[0]:
        result.append([a[0], b[0] - 1])
    if b[1] < a[1]:
        result.append([b[1] + 1, a[1]])
    return result

def first_fit_range(free_block, amount, allocated_blocks, no_prefix=True):
    """Return first non-conflicting range satisfying request, or None.

    If no_prefix is True, then the block returned must not be
    expressible as a prefix.

    >>> first_fit_range([3,3], 1, [])   # fails b/c equivalent to prefix
    >>> first_fit_range([2,3], 2, [])   # fails b/c equivalent to prefix
    >>> first_fit_range([2,3], 2, [], no_prefix=False)
    [2, 3]
    >>> first_fit_range([3,4], 2, [])
    [3, 4]
    >>> first_fit_range([10,100], 30, [[40,45],[47,50]])
    [52, 81]
    >>> first_fit_range([10,100], 30, [[40,45],[47,50],[60,80]]) # out of rsrcs
    """
    search_position = free_block[0]
    while True:
        candidate = [search_position, search_position + amount - 1]
        if not is_contained(candidate, free_block): # out of resources
            break
        if no_prefix and is_prefix(candidate):
            search_position += 1
            continue
        conflict = detect_conflict(candidate, allocated_blocks)
        if conflict is None:
            return candidate
        else:
            search_position = conflict[1] + 2 # not overlapping nor adjacent
    return None

def first_fit_prefix(free_block, amount, allocated_blocks):
    """Return first non-conflicting prefix satisfying request, or None.

    >>> first_fit_prefix([3,3], 1, [])
    [3, 3]
    >>> first_fit_prefix([4,4], 1, [])
    [4, 4]
    >>> first_fit_prefix([20,40], 8, [])
    [24, 31]
    >>> first_fit_prefix([20,40], 8, [[21,23]])
    [32, 39]
    >>> first_fit_prefix([20,40], 8, [[21,23], [31,34]]) # should fail
    """
    search_position = free_block[0]
    while True:
        candidate = next_prefix(search_position, amount)
        if not is_contained(candidate, free_block): # out of resources
            break
        conflict = detect_conflict(candidate, allocated_blocks)
        if conflict is None:
            return candidate
        else:
            search_position = conflict[1] + 2 # not overlapping or adjacent
    return None

def next_prefix(start_pos, amount):
    """Return the next prefix of the requested size.

    >>> next_prefix(10,2)
    [10, 11]
    >>> next_prefix(10,4)
    [12, 15]
    >>> next_prefix(128,64)
    [128, 191]
    """
    if not is_pow(amount, 2):
        raise AllocationError("Prefix request has invalid size: %d." % amount)
    if start_pos % amount == 0:
        next_multiple = start_pos
    else:
        next_multiple = ((start_pos // amount) + 1) * amount
    prefix = [next_multiple, next_multiple + amount - 1]
    if not is_prefix(prefix):
        raise AllocationInternalError(str(prefix) +
                                      " should have been a prefix")
    return prefix

def is_contained(a, b):
    """Does the interval [a[0],a[1]] fit completely within [b[0],b[1]]?

    >>> is_contained((0,0),(1,2))
    False
    >>> is_contained((0,1),(0,1))
    True
    >>> is_contained((0,1),(0,2))
    True
    >>> is_contained((0,2),(0,1))
    False
    """
    if a[0] > a[1]:
       raise AllocationInternalError("Invalid interval (%d, %d)" % (a[0], a[1]))
    if b[0] > b[1]:
       raise AllocationInternalError("Invalid interval (%d, %d)" % (b[0], b[1]))
    if b[0] <= a[0] and a[1] <= b[1]:
        return True
    else:
        return False

def is_overlapping(a, b):
    """Do the closed intervals [a[0], a[1]] and [b[0], b[1]] overlap?

    >>> is_overlapping((0,0),(1,2))
    False
    >>> is_overlapping((1,3),(0,0))
    False
    >>> is_overlapping((0,1),(1,2))
    True
    >>> is_overlapping((1,2),(0,1))
    True
    >>> is_overlapping((1,4),(2,3))
    True
    """
    if a[0] > a[1]:
       raise AllocationInternalError("Invalid interval (%d, %d)" % (a[0], a[1]))
    if b[0] > b[1]:
       raise AllocationInternalError("Invalid interval (%d, %d)" % (b[0], b[1]))
    if a[1] < b[0] or b[1] < a[0]:
        return False
    else:
        return True

def detect_conflict(candidate_block, allocated_blocks):
    """Detect a resource overlap or adjacency conflict.

    Return an element (integer pair) from allocated_blocks (list of
    integer pairs) that conflicts with candidate_block (integer pair).
    An element can conflict by being numerically adjacent to the
    candidate, or by numerically overlapping with it.  If no element
    of allocated_blocks conflicts with candidate_block, return None.

    >>> detect_conflict((1,3), []) # no allocated blocks, no conflict
    >>> detect_conflict((1,3), [(7,9)]) # no conflict
    >>> detect_conflict((1,3), [(7,9), (4,5)])
    (4, 5)
    """
    expanded = (candidate_block[0] - 1, candidate_block[1] + 1)
    for a in allocated_blocks:
        if is_overlapping(expanded, a):
            return a
    return None

if __name__ == "__main__":
    import doctest
    doctest.testmod()
