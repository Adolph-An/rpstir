#!@PYTHON@

from datetime import datetime
from time import time
from netaddr import IPAddress, IPNetwork, IPRange
import base64
import os

#Quick import hack, linked to src/create_objects
from create_objects import *
from generic_allocate import generic_allocate

OBJECT_PATH = "../objects"
REPO_PATH = OBJECT_PATH+"/REPOSITORY"
DEBUG_ON = False
RSYNC_EXTENSION = "r:rsync://"

class ASRange:
    def __init__(self, s):
        x = s.split("-")
        if len(x) == 1:
            self.first = int(x[0].strip())
            self.last = self.first
        elif len(x) == 2:
            self.first = int(x[0].strip())
            self.last = int(x[1].strip())
    def __str__(self):
        if self.first == self.last:
            return str(self.first)
        else:
            return str(self.first) + "-" + str(self.last)
    def __cmp__(self, other):
        if self.first < other.first:
            return -1
        elif self.first == other.first:
            return 0
        else:
            return 1

class Factory:
    def __init__(self, bluePrintName = "", ipv4List = [], ipv6List= [],\
                 asList = [], childSpec = [()], serverName = "",\
                 breakAway = False, ttl = 0, subjkeyfile=None):
        # Particular type of CA object as specified in config file
        self.bluePrintName = bluePrintName
        
        
        #Different for IANA. These are directly set to the cert
        #See the certificate class constructor for reference
        self.ipv4List = ipv4List
        self.ipv6List = ipv6List
        
        #Autonomous system list
        self.asList = asList
        
        #Specification of children that reside under this CA as a list
        #of tuples. [(bluePrintName, amount),..]
        self.childSpec = childSpec

        self.serverName = serverName        
        self.breakAway = breakAway
        
        #Time to live before certificate expiration, measured in days
        self.ttl = ttl

        #Subject key-pair file.  Used for IANA, possibly others.
        self.subjkeyfile = subjkeyfile
        
    def create(self, parent):
        if DEBUG_ON:
            print "creating a CA_object as specified by "+ self.bluePrintName
        return CA_Object(self,parent)
#
# The ROA Factory class. Inherits from Certificate.
#
class ROA_Factory(Factory):
    def __init__(self, bluePrintName = "", ipv4List = [], ipv6List= [], \
            asList = [], childSpec = [()], serverName = "", \
            breakAway = False, ttl = 0, ROAipv4List =[], ROAipv6List = [], \
            asid = 0):
        
        #Call the factory constructor to initialize inherited args
        Factory.__init__(self, bluePrintName, ipv4List, ipv6List, asList,\
                childSpec, serverName, breakAway, ttl)
        
        #ROA specific
        self.ROAipv4List = ROAipv4List
        self.ROAipv6List = ROAipv6List
        # The line below always ends up ('r',1).  asid should really
        # be as_amount, which, for a ROA, is always 1.
        self.asid = [('r',asid)]
        
    def create(self, parent):
        if DEBUG_ON:
            print "creating a ROA for "+ self.bluePrintName
            
        ee_object = EE_Object(self, parent)
        return Roa(self,ee_object) 
 
#Takes a netAddrList and converts it to a list of IP range strings for certificates
def parseIPForCert(self, netAddrList):
    ipStrings = []
    for ipRange in netAddrList:
        #Get the string representation of our address and add it to the list we'll pass to CA_cert
        ipStrings.append(str(ipRange))
    return ipStrings
    
#Takes an as list and converts it to a list of AS range strings for certificates
def parseASForCert(self, intTupleList):
    asStrings = []
    for asRange in intTupleList:
        #Get the string representation of our address and add it to the list we'll pass to CA_cert
        asStrings.append(str(asRange[0])+"-"+str(asRange[1]))
    return asStrings
       

class Resource_Block:
    def __init__(self, range, ca_name, block_id= 0, allocated=False):
        #integer tuple or netaddr.IPRange
        self.range = range
        self.ca_name = ca_name
        #not sure if a unique identifier is needed yet
        self.block_id = block_id
        self.allocated = allocated

class EE_Object:
    def __init__(self, myFactory, parent=None):

        self.bluePrintName = myFactory.bluePrintName
        self.myFactory = myFactory
        self.parent = parent
        
        #List initialization
        self.children = []
        self.ipv4Resources = parent.subAllocateIPv4(myFactory.ipv4List)
        self.ipv6Resources = parent.subAllocateIPv6(myFactory.ipv6List)
        self.asResources = parent.subAllocateAS(myFactory.asList)
        self.ipv4ResourcesFree = [[x.first, x.last] \
                                  for x in self.ipv4Resources]
        self.ipv6ResourcesFree = [[x.first, x.last] \
                                  for x in self.ipv6Resources]
        self.asResourcesFree = [[x.first, x.last] \
                                for x in self.asResources]
    
        #Intialize our certificate
        self.certificate = EE_cert(parent,myFactory,
                                   self.ipv4Resources,
                                   self.ipv6Resources,
                                   self.asResources)
        
        #Grab what I need from the certificate 
        #Obtain just the SIA path and cut off the r:rsync
        self.SIA_path = self.certificate.sia[len(RSYNC_EXTENSION):]
        self.id = self.certificate.serial 
        self.path_ROA = self.SIA_path
        
    #Hard coded suballocation currently, need to implement actual allocation
    def subAllocateIPv4(self,iplist):
        print "IPv4 Request: " + repr(iplist)
        # Note that the following may raise an exception!
        allocated_pairs = generic_allocate(self.ipv4ResourcesFree,
                                           [], # used list not recorded
                                           iplist,
                                           range_not_prefix=True)
        allocated_blocks = [IPRange(IPAddress(x[0],version=4), \
                                    IPAddress(x[1],version=4)) \
                            for x in allocated_pairs]
        # FIXME: maxlength not supported
        allocated_blocks.sort()
        return allocated_blocks
    def subAllocateIPv6(self,iplist):
        print "IPv6 Request: " + repr(iplist)
        # Note that the following may raise an exception!
        allocated_pairs = generic_allocate(self.ipv6ResourcesFree,
                                           [], # used list not recorded
                                           iplist,
                                           range_not_prefix=True)
        allocated_blocks = [IPRange(IPAddress(x[0],version=6), \
                                    IPAddress(x[1],version=6)) \
                            for x in allocated_pairs]
        # FIXME: maxlength not supported
        allocated_blocks.sort()
        return allocated_blocks
    def subAllocateAS(self, asList):
        print "AS Request: " + repr(asList)
        # Note that the following may raise an exception!
        allocated_pairs = generic_allocate(self.asResourcesFree,
                                           [], # used list not recorded
                                           asList,
                                           range_not_prefix=False)
        allocated_blocks = [ASRange(str(x[0]) + '-' + str(x[1])) \
                            for x in allocated_pairs]
        allocated_blocks.sort()
        return allocated_blocks

    def allocate(self, ipv4List, ipv6List, asList):
        return (self.subAllocateIPv4(ipv4List),
                self.subAllocateIPv6(ipv6List),
                self.subAllocateAS(asList))
    
    
class CA_Object:

    def __init__(self, myFactory, parent=None, subjkeyfile=None):

        self.nextChildSN = 0
        self.bluePrintName = myFactory.bluePrintName
        self.myFactory = myFactory
        self.parent = parent
        #List initialization
        self.children = []
        self.manifests = []
        self.roas = []
        self.crl = []

        if parent is not None: # normal CA
            self.ipv4Resources = parent.subAllocateIPv4(myFactory.ipv4List)
            self.ipv6Resources = parent.subAllocateIPv6(myFactory.ipv6List)
            self.asResources = parent.subAllocateAS(myFactory.asList)
        else: # trust anchor CA
            self.ipv4Resources = myFactory.ipv4List
            self.ipv6Resources = myFactory.ipv6List
            self.asResources = myFactory.asList
        
        self.ipv4ResourcesFree = [[x.first, x.last] \
                                  for x in self.ipv4Resources]
        self.ipv6ResourcesFree = [[x.first, x.last] \
                                  for x in self.ipv6Resources]
        self.asResourcesFree = [[x.first, x.last] \
                                for x in self.asResources]
        
        #Intialize our certificate
        if parent != None:
            self.certificate = CA_cert(parent,myFactory,
                                       self.ipv4Resources,
                                       self.ipv6Resources,
                                       self.asResources,
                                       subjkeyfile=subjkeyfile)
        else:
            self.certificate = SS_cert(parent,myFactory,
                                       subjkeyfile=subjkeyfile)
        #Grab what I need from the certificate 
        #Obtain just the SIA path and cut off the r:rsync://
        sia_list = self.certificate.sia[len(RSYNC_EXTENSION):].split(",")
        #Remove the '/' appened on the end for easier string concatenation
        self.SIA_path = sia_list[0][:-1]
        self.manifest_path = sia_list[1][len(RSYNC_EXTENSION):]
        self.id = self.certificate.serial 
        self.path_CA_cert = self.certificate.outputfilename
        self.nickName= self.myFactory.bluePrintName+"-"+str(self.id)
        if parent != None:
            self.commonName = parent.commonName+"."+self.nickName
        else:
            self.commonName = self.nickName
        
    def subAllocateIPv4(self,iplist):
        print "IPv4 Request: " + repr(iplist)
        # Note that the following may raise an exception!
        allocated_pairs = generic_allocate(self.ipv4ResourcesFree,
                                           [], # used list not recorded
                                           iplist,
                                           range_not_prefix=True)
        allocated_blocks = [IPRange(IPAddress(x[0],version=4), \
                                    IPAddress(x[1],version=4)) \
                            for x in allocated_pairs]
        allocated_blocks.sort()
        return allocated_blocks
    def subAllocateIPv6(self,iplist):
        print "IPv6 Request: " + repr(iplist)
        # Note that the following may raise an exception!
        allocated_pairs = generic_allocate(self.ipv6ResourcesFree,
                                           [], # used list not recorded
                                           iplist,
                                           range_not_prefix=True)
        allocated_blocks = [IPRange(IPAddress(x[0],version=6), \
                                    IPAddress(x[1],version=6)) \
                            for x in allocated_pairs]
        allocated_blocks.sort()
        return allocated_blocks
    def subAllocateAS(self, asList):
        print "AS Request: " + repr(asList)
        # Note that the following may raise an exception!
        allocated_pairs = generic_allocate(self.asResourcesFree,
                                           [], # used list not recorded
                                           asList,
                                           range_not_prefix=False)
        allocated_blocks = [ASRange(str(x[0]) + '-' + str(x[1])) \
                            for x in allocated_pairs]
        allocated_blocks.sort()
        return allocated_blocks
    
    def allocate(self, ipv4List, ipv6List, asList):
        return (self.subAllocateIPv4(ipv4List),
                self.subAllocateIPv6(ipv6List),
                self.subAllocateAS(asList))
    
    def getNextChildSN(self):
        nextChild = self.nextChildSN
        self.nextChildSN += 1
        return nextChild
        
        
