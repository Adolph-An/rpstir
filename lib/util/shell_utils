# Utility functions for shell scripts

# 'pecho': portable echo.  POSIX says echo might interpret backslashes
# and a first argument that begins with '-', but printf is consistent.
# This function assumes that IFS is either unset or the first
# character of IFS is a space.
pecho() { printf %s\\n "$*"; }

log() { pecho "$@"; }
warn() { log "WARNING: $@" >&2; }
error() { log "ERROR: $@" >&2; }
fatal() { error "$@"; exit 1; }

# 'try': function to make it easier to catch errors
#
# 'set -e' is not clearly specified by POSIX, and different shells do
# very different things.  Thus, it's not very useful for catching
# errors.  'try' is intended to be easy to use; usually you can just
# put it in front of a command, e.g.:
#
#     try some_command --arg
#
# and it will cause the script to exit non-zero if the command fails.
#
# Caveats:
#
#   * redirection errors aren't caught by 'try', so the following
#     won't cause the script to exit:
#
#         try echo foo >/no/such/directory/file
#
#     you'll have to do this instead:
#
#         try echo foo >/no/such/directory/file || exit 1
#
#     or, to get an "ERROR: ..." message:
#
#         try eval 'try echo foo >/no/such/directory/file'
#
#   * the error message doesn't quote special characters in the
#     arguments, which can lead to misleading error messages:
#
#         $ try false "spaces and a single quote '"
#         ERROR: 'false spaces and a single quote '' failed
#
#   * the 'exit 1' in fatal() and try() only causes a subshell to
#     exit, so if you're running something in a subshell you'll need
#     to add '|| exit 1' after the subshell.  For example:
#
#         val=$(try some_command --arg) || exit 1
#
#     note that POSIX allows the final stage in a pipeline to be in a
#     subshell, so you'll need '|| exit 1' after pipelines too:
#
#         pecho foo | try some_command --arg || exit 1
#
try() { "$@" || fatal "'$@' failed"; }

# depends on the script defining a usage function that prints a help message
usage_fatal() { error "$@"; pecho "" >&2; usage >&2; exit 1; }


# Try to lock a mutex pathname.
# Returns 0 on successful lock, otherwise returns non-zero.
mutex_trylock () {
    local lockpath

    if test $# -ne 1; then
        error "mutex_trylock takes one argument"
        return 2
    fi

    lockpath="$1"

    if ln -s "locked by pid $$" "$lockpath" > /dev/null 2>&1; then
        return 0
    else
        error "failed to acquire lock $lockpath"
        return 1
    fi
}

# Unlock a mutex pathname.
mutex_unlock () {
    local lockpath ret

    if test $# -ne 1; then
        error "mutex_trylock takes one argument"
        return 2
    fi

    lockpath="$1"

    ret=0

    rm "$lockpath" || ret=1

    return $ret
}


# Compute the minimal relative path from the curent directory to the path
# specified as an argument.
#
# NOTE: This currently only works if the specified path exists and is a
#       directory.
relpath () {
    local abs_path cur_path rel_path common_prefix

    if test $# -ne 1; then
        error "relpath takes one argument"
        return 1
    fi

    abs_path="$(cd "$1" && pwd)" || {
        error "Can't cd into $1"
        return 1
    }
    if test "$abs_path" = "/"; then
        abs_path=""
    fi

    cur_path="$(pwd)"
    if test "$cur_path" = "/"; then
        cur_path=""
    fi

    common_prefix="$cur_path" # common prefix of $cur_path and $abs_path
    rel_path="." # relative path from $cur_path to $common_prefix
    while true; do
        case "$abs_path" in
            "$common_prefix")
                echo "$rel_path"
                return 0
                ;;

            "$common_prefix"/*)
                if test "$rel_path" = "."; then
                    echo "${abs_path#"$common_prefix"/}"
                else
                    echo "${rel_path}/${abs_path#"$common_prefix"/}"
                fi
                return 0
                ;;

            *)
                # $abs_path is not equal to or a child of $common_prefix, so
                # remove the last path component from $common_prefix.
                common_prefix="${common_prefix%/*}"
                if test "$rel_path" = "."; then
                    rel_path=".."
                else
                    rel_path="../$rel_path"
                fi
                ;;
        esac
    done
}
