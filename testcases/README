                   Making Test Cases

    The creation of test cases has been automated largely with script files,
starting with the file "makeall".  This file calls a number of other script
files: "makecerts", "makecrls", "makeroas" and "makemanifests".  These in turn
call programs in this directory, such as "make_cert", "make_crl", make_roa" and
"make_manifest" giving the name of the file to be created and sometimes other
parameters.  The files created have a simple naming structure indicating their
types.  All certificates are named (in shell notation) "C*.cer", CRLs are
"L*.crl", ROAs are "R*.roa", and manifests are "M*.man".  The meanings of the
intervening characters are described under each type below.  For convenmience,
the various tools produce an additional file suffixed ".raw" which shows the
contents of the main file generated in more readable form.  (If the user sets
the environment variable OIDTABLE to point to cg/asn/oidtable, the OBJECT
IDENTIFIERS will be interpreted in the raw file.)

    In addition to the "makeall" script there is a file "testall.sh" which 
initializes the database adne then loads the test files into the database.

1. Certificates

    Certificates have only a simple commonName for their issuer and subject
names.  The subject name is the same as the left part of the certificate file
name, e.g. the certificate for the CA named "C12" is "C12.cer".  Certificates
are either CA certificates or end-entity certificates.  CA certificates have
only digits in the middle part.  The top certificate is for the CA "C"; it is
self-signed.  End-entity certificates have the same first part as the signing
CA followed by either an "R" for ROA signers or an "M" for manifest signers
and then a digit to indicate the sequence, e.g. "C12R3" is the name of the
signer of C12's third ROA.  All end-entity certificates have all the IP
addresses and AS numbers of their CA.

    To create certificates one must first run the gen_test_key program and
give it a subject name to produce a file suffixed ".p15" to produce a file
suffixed ".p15", thus

    gen_test_key C12

produces the file "C12.p15".  It should not be necessary to generate the keys
more than once.

    To make the certificate one must then run

    make_test_cert C12 su eu

where s and e represent some (possibly signed) number of one or more digits and
u is either "Y" for years, "M" for months, "W" for weeks, "D" for days, "h" for
hours, "m" for minutes or "s" for seconds.  The starting time of the certificate
will be the current time adjusted by the "su" parameter, and the ending time
will be the current time adjusted by the "eu" parameter.  The IP address and AS
number extensions must be supplied either interactively or by identifying a
script file as standard input.  The latter method is simpler.  With a script
file, the first lines define the IPv4 prefixes, followed by a blank line
followed by IPv6 prefix(es), a blank line and one or more lines of AS numbers
or ranges, e.g. "63-68".

    Making the "top" certificate is different.  One must start with an almost
fully formed certificate, such as "C.cer" and modify its dates, IP address
blocks and AS numbers.  To make changes to C.cer, the best way is to edit
C.raw keeping the indentations lined up and then convert it like this:

    ../cg/tools/rr <C.raw >C.cer

To check the results, do

    ../cg/tools/dump -a C.cer

This will show a result similar to C.raw except that it will not "look inside"
the OCTET STRING in each extension.

2. Certificate Revocation Lists

    CRLs are made in much the same way as certificates, except the program
make_test_crl is used.  The CRL name contains the the digits in the CA name
followed by a one-digit serial number, so "L123.crl" is the third CRL issued
by CA C12.  The starting and ending times are set in the same way as for
certificates:

    make_test_crl L123 0D 3M <makeL123

 A script file (or interactive method) lists the certificates to be revoked
by having on each line the name of the subject and the time of revocation in
relation to the starting date of the CRL.  For example

     C12 -10D

indicates that C12's certificate was revoked ten days before the CRL was
issued.

3. ROAs

    ROAs are made with the tool make_test_roa, which takes as parameters the
ROA filename, the EE cert filename, the EE cert keyfile name (to get the
private key), the index of the AS number for this ROA (the cert will likely
have more than one AS number under its control). There are optional
arguments as well, to mark the signature bad, and to generate a file
containing a readable version of the ROA. 

usage:
./make_test_roa -r roafile -c certfile -k keyfile -i index [-R readable][-b]

  -r roafile: file to write roa to
  -c certfile: file holding EE cert for roa
  -k keyfile: file holding p15-format public key for signing roa
  -i index: which child is this (of that cert) (one-based)
  -R readable: file to write readable asn.1 for roa to
  -b: generate bad (invalid) signature

Typically, the name of the ROA consists of "R" followed by digits and
".roa", and R123.roa is the third ROA produced by CA C12 (cert C12.cer) and
signed by end entity C12R3.cer, with key pair found in C12R3.p15. To
generate this ROA and save off a printable version, you use

    make_test_roa -r R123.roa -c C12R3.cer -i 3 -k C12R3.p15 -R R123.raw

4. Manifests

    Manifests are created with the tool make_test_manifest, which takes three
parameters (the manifest name and start and end times) and a script file
listing all the objects covered by the manifest.  If the name of an object is
followed by white space and a letter, the hash in the entry for that file in
the manifest is made bad.  The name of the manifest consists of "M" followed
by digits and ".man".  The manifest M123.man is the third manifest issued by
CA C12 and signed by end entity C12M3, e.g.

    make_test_manifest M123 0D 3M <makeM123

5. Script files

    The file "makeall" creates a set of test files with 
