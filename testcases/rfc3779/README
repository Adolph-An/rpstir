#####################################
Test cases for RFC 3779 extensions
by Charlie Gardiner and Andrew Chi
#####################################

The following test cases are designed to verify the handling of RFC
3779 extensions for X.509 certificates, under the restrictions defined
by the Resource Certificate Profile (draft-ietf-sidr-res-certs-18).
Comprehensive coverage of all possible valid and invalid certificates
is infeasible.  Nevertheless, the following cases check (1) each
requirement in the RFC, and (2) corner cases that may reveal common
software errors.

All test cases are variations of two well-formed "base" certificates:
a parent (P*) and child (C*) with correct RFC3779 relationships.  P*
and C* both contain multiple IPv4 and IPv6 IPaddressOrRange sequence
elements, and multiple AS numbers.  Unless otherwise specified, the
RFC3779 extensions of each certificate below are a superset of the
RFC3779 extensions in either P* or C*.  This verifies both the
independence and the correct combination of behavior when handling
IPv4, IPv6, and AS number fields.


Base Certificates
-----------------

P*: The "base" parent certificate contains the following RFC3779 fields.

IPv4 IPAddress        8.0/16
IPv4 IPAddress        8.2/16
IPv4 IPAddressRange   9.2.3.4 - 9.2.5.255
IPv6 IPAddress        1111::/16
IPv6 IPAddressRange   AAA1:: - AAA3::
ASId                  1234
ASRange               1236-1242


C*: The "base" child certificate contains the following RFC3779 fields.

IPv4 IPAddress        8.0.0/24
IPv4 IPAddressRange   9.2.3.4 - 9.2.3.8
IPv4 IPAddressRange   9.2.4.4 - 9.2.4.8
IPv6 IPAddress        1111:1111::/32
IPv6 IPAddressRange   AAA1:: - AAA2::
ASId                  1236
ASRange               1238-1239
ASRange               1241-1242


IPv4 / IPv6 Test Cases
----------------------

1. Tests for encoding order of IPaddressOrRange sequence elements (8
   positive, 8 negative cases):

   Generate certificates by appending to C*:
   first {IPv4/IPv6} sequence element is a {prefix/range},
   next sequence element is a {prefix/range},
   and the sequence elements are {correctly/incorrectly} ordered.

   Cases:

   +
   IPv4 IPAddress        10.0.0/24
   IPv4 IPAddress        10.0.2/24

   -
   IPv4 IPAddress        10.0.2/24
   IPv4 IPAddress        10.0.0/24

   +
   IPv4 IPAddress        10.0.0/24
   IPv4 IPAddressRange   10.2.4.4 - 10.2.4.8

   -
   IPv4 IPAddressRange   10.2.4.4 - 10.2.4.8
   IPv4 IPAddress        10.0.0/24

   +
   IPv4 IPAddressRange   10.2.4.4 - 10.2.4.8
   IPv4 IPAddress        10.3.0/24

   -
   IPv4 IPAddress        10.3.0/24
   IPv4 IPAddressRange   10.2.4.4 - 10.2.4.8

   +
   IPv4 IPAddressRange   10.2.3.4 - 10.2.3.8
   IPv4 IPAddressRange   10.2.4.4 - 10.2.4.8

   -
   IPv4 IPAddressRange   10.2.4.4 - 10.2.4.8
   IPv4 IPAddressRange   10.2.3.4 - 10.2.3.8

   +
   IPv6 IPAddress        2222::/16
   IPv6 IPAddress        2224::/16

   -
   IPv6 IPAddress        2224::/16
   IPv6 IPAddress        2222::/16

   +
   IPv6 IPAddress        2222::/16
   IPv6 IPAddressRange   3333:: - 3334::

   -
   IPv6 IPAddressRange   3333:: - 3334::
   IPv6 IPAddress        2222::/16

   +
   IPv6 IPAddressRange   2222:: - 2223::
   IPv6 IPAddress        3333::/16

   -
   IPv6 IPAddress        3333::/16
   IPv6 IPAddressRange   2222:: - 2223::

   +
   IPv6 IPAddressRange   2222:: - 2223::
   IPv6 IPAddressRange   3333:: - 3334::

   -
   IPv6 IPAddressRange   3333:: - 3334::
   IPv6 IPAddressRange   2222:: - 2223::


2. Tests for adjacent sequence elements (8 negative cases)

   Generate certificates by appending to C*:
   first {IPv4/IPv6} sequence element is a {prefix/range},
   next sequence element is a {prefix/range},
   and the sequence elements are adjacent in address space.

   Cases:

   -
   IPv4 IPAddress        10.0.0/24
   IPv4 IPAddress        10.0.1/24

   -
   IPv4 IPAddress        10.0.0/24
   IPv4 IPAddressRange   10.0.1.0 - 10.0.1.2

   -
   IPv4 IPAddressRange   10.0.0.253 - 10.0.0.255
   IPv4 IPAddress        10.0.1/24

   -
   IPv4 IPAddressRange   10.0.0.253 - 10.0.0.255
   IPv4 IPAddressRange   10.0.1.0 - 10.0.1.2

   -
   IPv6 IPAddress        2222::/16
   IPv6 IPAddress        2223::/16

   -
   IPv6 IPAddress        2222::/16
   IPv6 IPAddressRange   2223:: - 2223::0002

   -
   IPv6 IPAddressRange   2222::1 - 2222::ffff
   IPv6 IPAddress        2222:0:0:0:0:0:1/112

   -
   IPv6 IPAddressRange   2222:: - 2222::2
   IPv6 IPAddressRange   2222::3 - 2222::5

3. Tests for overlapping sequence elements (8 negative cases)

   Generate certificates by appending to C*:
   first {IPv4/IPv6} sequence element is a {prefix/range},
   next sequence element is a {prefix/range},
   and the sequence elements overlap by one address.

   Cases:

   -
   IPv4 IPAddress        10.0.0/24
   IPv4 IPAddress        10.0.0.255/32

   -
   IPv4 IPAddress        10.0.0/24
   IPv4 IPAddressRange   10.0.0.255 - 10.0.1.1

   -
   IPv4 IPAddressRange   10.0.0.254 - 10.0.1.0
   IPv4 IPAddress        10.0.1/24

   -
   IPv4 IPAddressRange   10.0.0.254 - 10.0.1.0
   IPv4 IPAddressRange   10.0.1.0 - 10.0.1.2

   -
   IPv6 IPAddress        2222::/128
   IPv6 IPAddress        2222::/16

   -
   IPv6 IPAddress        2222::/16
   IPv6 IPAddressRange   2222:ffff:ffff:ffff:ffff:ffff:ffff:ffff - 2223::1

   -
   IPv6 IPAddressRange   2222:: - 2223::
   IPv6 IPAddress        2223::/16

   -
   IPv6 IPAddressRange   2222:: - 2223::
   IPv6 IPAddressRange   2223:: - 2223::2

4. Tests for child within parent limits (28 positive, 44 negative cases)

   Generate certificates by appending to C* and P* where
   the following sequence elements are {IPv4/IPv6},
   parent has sequence element {prefix/range},
   child  has sequence element {prefix/range},
   child low limit is {less than/equal to/greater than} parent low limit,
   child high limit is {less than/equal to/greater than} parent high limit.
   These are represented below (in abbreviated form) by 4 symbols in order where
     First symbol is P or R to indicate if parent is a prefix or a range
     Second   "   "  " "  "  "   "      "  child  "  "  "     "  "  "
     Third    "   " L, E or G to show if child's low limit is <, = or >
     Fourth   "   " "  "    "  "  "   "   "       "    "   "  "  "    "
   Cases:

4.1 IPv4

4.1.1   -  PPLL
   Parent IPv4 IPAddress       10.0.5/24
   Child  IPv4 IPAddress       10.0.4/24

4.1.2   - PPLE
   Parent IPv4 IPAddress       10.0.5/24
   Child  IPv4 IPAddress       10.0.4/23

4.1.3   - PPLG
   Parent IPv4 IPAddress       10.0.5/24
   Child  IPv4 IPAddress       10.0.0/21

4.1.4   + PPEL
   Parent IPv4 IPAddress       10.0.0/22
   Child  IPv4 IPAddress       10.0.0/24

4.1.5   + PPEE
   Parent IPv4 IPAddress       10.0.0/22
   Child  IPv4 IPAddress       10.0.0/22

4.1.6   - PPEG
   Parent IPv4 IPAddress       10.0.0/22
   Child  IPv4 IPAddress       10.0.0/20

4.1.7   + PPGL
   Parent IPv4 IPAddress       10.0.0/24
   Child  IPv4 IPAddress       10.0.0.128/26

4.1.8   + PPGE
   Parent IPv4 IPAddress       10.0.0/24
   Child  IPv4 IPAddress       10.0.0.128/25

4.1.9   - PPGG
   Parent IPv4 IPAddress       10.0.0/24
   Child  IPv4 IPAddress       10.0.1/24

4.1.10  - PRLL
   Parent IPv4 IPAddress       10.0.5/24
   Child  IPv4 IPAddressRange  10.0.4.1 - 10.0.4.255

4.1.11  - PRLE
   Parent IPv4 IPAddress       10.0.5/24
   Child  IPv4 IPAddressRange  10.0.4.255 - 10.0.5.255

4.1.12  - PRLG
   Parent IPv4 IPAddress       10.0.5/24
   Child  IPv4 IPAddressRange  10.0.4.255 - 10.0.6.0

4.1.13   + PREL
   Parent IPv4 IPAddress       10.0.5/24
   Child  IPv4 IPAddressRange  10.0.5.0 - 10.0.5.5

4.1.14   - PREE
   Parent IPv4 IPAddress       10.0.5/24
   Child  IPv4 IPAddressRange  10.0.5.0 - 10.0.5.255  (invalid: range = prefix)

4.1.15   - PREG
   Parent IPv4 IPAddress       10.0.5/24
   Child  IPv4 IPAddressRange  10.0.5.0 - 10.0.6.0

4.1.16   + PRGL
   Parent IPv4 IPAddress       10.0.5/24
   Child  IPv4 IPAddressRange  10.0.5.1 - 10.0.5.5

4.1,17   + PRGE
   Parent IPv4 IPAddress       10.0.5/24
   Child  IPv4 IPAddressRange  10.0.5.1 - 10.0.5.255

4.1.18   - PRGG
   Parent IPv4 IPAddress       10.0.5/24
   Child  IPv4 IPAddressRange  10.0.5.1 - 10.0.6.0

4.1.19   - RPLL
   Parent IPv4 IPAddressRange  10.0.5.1 - 10.0.5.255
   Child  IPv4 IPAddress       10.0.4/24

4.1.20   - RPLE
   Parent IPv4 IPAddressRange  10.0.5.1 - 10.0.5.255
   Child  IPv4 IPAddress       10.0.4/23

4.1.21   - RPLG
   Parent IPv4 IPAddressRange  10.0.5.1 - 10.0.5.255
   Child  IPv4 IPAddress       10.0.4/22

4.1.22   + RPEL
   Parent IPv4 IPAddressRange  10.0.5.0 - 10.0.5.254
   Child  IPv4 IPAddress       10.0.5/25

4.1.23   - RPEE
   Parent IPv4 IPAddressRange  10.0.5.0 - 10.0.5.255 (invalid: range = prefix)
   Child  IPv4 IPAddress       10.0.5/24

4.1.24   - RPEG
   Parent IPv4 IPAddressRange  10.0.5.0 - 10.0.5.254
   Child  IPv4 IPAddress       10.0.5/24

4.1.25   + RPGL
   Parent IPv4 IPAddressRange  10.0.4.255 - 10.0.5.255
   Child  IPv4 IPAddress       10.0.5/25

4.1.26   + RPGE
   Parent IPv4 IPAddressRange  10.0.4.255 - 10.0.5.255
   Child  IPv4 IPAddress       10.0.5/24

4.1.27   - RPGG
   Parent IPv4 IPAddressRange  10.0.4.255 - 10.0.5.255
   Child  IPv4 IPAddress       10.0.5/23

4.1.28   - RRLL
   Parent IPv4 IPAddressRange  10.0.4.1 - 10.0.4.10
   Child  IPv4 IPAddressRange  10.0.4.0 - 10.0.4.9

4.1.29   - RRLE
   Parent IPv4 IPAddressRange  10.0.4.1 - 10.0.4.10
   Child  IPv4 IPAddressRange  10.0.4.0 - 10.0.4.10

4.1.30   - RRLG
   Parent IPv4 IPAddressRange  10.0.4.1 - 10.0.4.10
   Child  IPv4 IPAddressRange  10.0.4.0 - 10.0.4.11

4.1.31   + RREL
   Parent IPv4 IPAddressRange  10.0.4.1 - 10.0.4.10
   Child  IPv4 IPAddressRange  10.0.4.1 - 10.0.4.9

4.1.32   + RREE
   Parent IPv4 IPAddressRange  10.0.4.1 - 10.0.4.10
   Child  IPv4 IPAddressRange  10.0.4.1 - 10.0.4.10

4.1.33   - RREG
   Parent IPv4 IPAddressRange  10.0.4.1 - 10.0.4.10
   Child  IPv4 IPAddressRange  10.0.4.1 - 10.0.4.11

4.1.34   -  RRGL BAD?
   Parent IPv4 IPAddressRange  10.0.4.1 - 10.0.4.10
   Child  IPv4 IPAddressRange  10.0.4.2 - 10.0.4.9

4.1.35   + RRGE
   Parent IPv4 IPAddressRange  10.0.4.1 - 10.0.4.10
   Child  IPv4 IPAddressRange  10.0.4.2 - 10.0.4.10

4.1.36   + RRGG  GOOD?
   Parent IPv4 IPAddressRange  10.0.4.1 - 10.0.4.10
   Child  IPv4 IPAddressRange  10.0.4.2 - 10.0.4.11

4,2 IPv6

4.2.1   - PPLL
   Parent IPv6 IPAddress       0A00:05/24
   Child  IPv6 IPAddress       0A00:04/24

4.2.2   - PPLE
   Parent IPv6 IPAddress       0A00:05/24
   Child  IPv6 IPAddress       0A00:04/23

4.2.3   - PPLG
   Parent IPv6 IPAddress       0A00:05/24
   Child  IPv6 IPAddress       0A00:00/21

4.2.4   + PPEL
   Parent IPv6 IPAddress       0A00:00/22
   Child  IPv6 IPAddress       0A00:00/24

4.2.5   + PPEE
   Parent IPv6 IPAddress       0A00:00/22
   Child  IPv6 IPAddress       0A00:00/22

4.2.6   - PPEG
   Parent IPv6 IPAddress       0A00:00/22
   Child  IPv6 IPAddress       0A00:00/20

4.2.7   + PPGL
   Parent IPv6 IPAddress       0A00:00/24
   Child  IPv6 IPAddress       0A00:0080/26

4.2.8   + PPGE
   Parent IPv6 IPAddress       0A00:00/24
   Child  IPv6 IPAddress       0A00:0080/25

4.2.9   - PPGG
   Parent IPv6 IPAddress       0A00:00/24
   Child  IPv6 IPAddress       0A00:01/24

4.2.10   - PRLL
   Parent IPv6 IPAddress       0A00:05/24
   Child  IPv6 IPAddressRange  0A00:0401 - 0A00:04FF

4.2.11   - PRLE
   Parent IPv6 IPAddress       0A00:05/24
   Child  IPv6 IPAddressRange  0A00:04FF - 0A00:05FF

4.2.12   - PRLG
   Parent IPv6 IPAddress       0A00:05/24
   Child  IPv6 IPAddressRange  0A00:04FF - 0A00:0600

4.2.13   + PREL
   Parent IPv6 IPAddress       0A00:05/24
   Child  IPv6 IPAddressRange  0A00:05 - 0A00:0505

4.2.14   - PREE
   Parent IPv6 IPAddress       0A00:05/24
   Child  IPv6 IPAddressRange  0A00:0500 - 0A00:05FF  (invalid: range = prefix)

4.2.15  - PREG
   Parent IPv6 IPAddress       0A00:05/24
   Child  IPv6 IPAddressRange  0A00:05 - 0A00:0600

4.2.16 +  PRGL
   Parent IPv6 IPAddress       0A00:05/24
   Child  IPv6 IPAddressRange  0A00:0501 - 0A00:0505

4.2.17   + PRGE
   Parent IPv6 IPAddress       0A00:05/24
   Child  IPv6 IPAddressRange  0A00:0501 - 0A00:05

4.2.18   - PRGG
   Parent IPv6 IPAddress       0A00:05/24
   Child  IPv6 IPAddressRange  0A00:0501 - 0A00:0600

4.2.19   - RPLL
   Parent IPv6 IPAddressRange  0A00:0501:: - 0A00:05FF::
   Child  IPv6 IPAddress       0A00:04/24

4.2.20   - RPLE
   Parent IPv6 IPAddressRange  0A00:0501 - 0A00:05FF
   Child  IPv6 IPAddress       0A00:04/23

4.2.21   - RPLG
   Parent IPv6 IPAddressRange  0A00:0501 - 0A00:05FF
   Child  IPv6 IPAddress       0A00:04/22

4.2.22   + RPEL
   Parent IPv6 IPAddressRange  0A00:0500 - 0A00:05FE
   Child  IPv6 IPAddress       0A00:05/25

4.2.23   - RPEE
   Parent IPv6 IPAddressRange  0A00:0500 - 0A00:05FF (invalid: range = prefix)
   Child  IPv6 IPAddress       0A00:05/24

4.2.24   - RPEG
   Parent IPv6 IPAddressRange  0A00:0500 - 0A00:05FE
   Child  IPv6 IPAddress       0A00:05/24

4.2.25   + RPGL
   Parent IPv6 IPAddressRange  0A00:04FF - 0A00:05FF
   Child  IPv6 IPAddress       0A00:05/25

4.2.26   + RPGE
   Parent IPv6 IPAddressRange  0A00:04FF - 0A00:05FF
   Child  IPv6 IPAddress       0A00:05/24

4.2.27   - RPGG
   Parent IPv6 IPAddressRange  0A00:04FF - 0A00:05FF
   Child  IPv6 IPAddress       0A00:05/23

4.2.28   - RRLL
   Parent IPv6 IPAddressRange  0A00:0401 - 0A00:040A
   Child  IPv6 IPAddressRange  0A00:0400 - 0A00:0409

4.2.29   - RRLE
   Parent IPv6 IPAddressRange  0A00:0401 - 0A00:040A
   Child  IPv6 IPAddressRange  0A00:0400 - 0A00:040A

4.2.30   - RRLG
   Parent IPv6 IPAddressRange  0A00:0401 - 0A00:040A
   Child  IPv6 IPAddressRange  0A00:0400 - 0A00:040B

4.2.31   + RREL
   Parent IPv6 IPAddressRange  0A00:00401 - 0A00:040A
   Child  IPv6 IPAddressRange  0A00:0401 - 0A00:0409

4.2.32   + RREE
   Parent IPv6 IPAddressRange  0A00:0401 - 0A00:040A
   Child  IPv6 IPAddressRange  0A00:0401 - 0A00:040A

4.2.33   - RREG
   Parent IPv6 IPAddressRange  0A00:0401 - 0A00:040A
   Child  IPv6 IPAddressRange  0A00:0401 - 0A00:040B

4.2.34   - RRGL  BAD?
   Parent IPv6 IPAddressRange  0A00:0401 - 0A00:040A
   Child  IPv6 IPAddressRange  0A00:0402 - 0A00:0409

4.2.35   + RRGE
   Parent IPv6 IPAddressRange  0A00:0401 - 0A00:040A
   Child  IPv6 IPAddressRange  0A00:0402 - 0A00:040A

4.2.36   + RRGG GOOD?
   Parent IPv6 IPAddressRange  0A00:0401 - 0A00:040A
   Child  IPv6 IPAddressRange  0A00:0402 - 0A00:040B

5. Parent-child multi-member tests: none.  This was deemed unnecessary
   by A. Chi because all certificates above are built from "base"
   certificates with multiple members.  If the above tests pass, we
   have already exercised multi-member functionality.

6. Special tests

  6.1 Valid/invalid ranges

     6.1.1 Extra zero bits in low limit  (2 negative cases)

       Generate certificates by appending to C*:
       {IPv4/IPv6} address range where the lower limit is encoded with
       least significant zero bits.

       Cases:

       -
       IPv4 IPAddressRange 5.0.0.0 - 5.1.2.3 where the lower limit is
       encoded by the bit string 000001010.

       -
       IPv6 IPAddressRange FF00:: - FFFE::0010  where the lower
       limit is encoded by the bit string 111111110.

     6.1.2 Extra/missing one bits in upper limit (2 positive, 4 negative cases)

       Generate certificates by appending to C*:
       {IPv4/IPv6} address range where the lower limit is encoded with
       {zero/one/several} least-significant 1 bits.

       Cases:

       -
       IPv4 IPAddressRange 7.0.0.1 - 7.255.255.255 where the upper limit is
       encoded by the bit string 00000.

       +
       IPv4 IPAddressRange 7.0.0.1 - 7.255.255.255 where the upper limit is
       encoded by the bit string 000001.

       -
       IPv4 IPAddressRange 7.0.0.1 - 7.255.255.255 where the upper limit is
       encoded by the bit string 0000011.

       -
       IPv6 IPAddressRange 7::1 - 7:ffff:ffff:ffff:ffff:ffff:ffff:ffff
       where the upper limit is encoded by the bit string 0000000000000.

       +
       IPv6 IPAddressRange 7::1 - 7:ffff:ffff:ffff:ffff:ffff:ffff:ffff
       where the upper limit is encoded by the bit string 00000000000001.

       -
       IPv6 IPAddressRange 7::1 - 7:ffff:ffff:ffff:ffff:ffff:ffff:ffff
       where the upper limit is encoded by the bit string 000000000000011.

     6.1.3 Invalid range due to equivalence to prefix (4 negative cases)

       Cases:

       -
       IPv4 IPAddressRange 1.0.0.0 - 1.0.0.0

       -
       IPv4 IPAddressRange 1.0.0.0 - 1.0.255.255

       -
       IPv6 IPAddressRange 100:: - 100::

       -
       IPv6 IPAddressRange 100:: - 100:ffff:ffff:ffff:ffff:ffff:ffff:ffff

     6.1.4 Invalid range due to out-of-order limits (2 negative cases)

       Cases:

       -
       IPv4 IPAddressRange 1.1.0.0 - 1.0.0.0

       -
       IPv6 IPAddressRange 2:: - 1::

     6.1.5 Invalid ordering of IPv4 and IPv6 fields (1 negative case)

       -
       IPv6 IPAddressRange 1:: - 2::
       IPv4 IPAddressRange 1.0.0.0 - 1.1.0.0


  6.2 Valid/invalid prefixes (4 positive, 2 negative cases)

       Cases:

       +
       IPv4 IPAddress      0/0

       +
       IPv4 IPAddress      0/32

       -
       IPv4 IPAddress      8/33

       +
       IPv6 IPAddress      0::/0

       +
       IPv6 IPAddress      0::/128

       -
       IPv6 IPAddress      8::/129

  6.3 "Inherit" capability (2 positive, 2 negative cases)

       Cases:

       -
       GrGrParent  IPv4 IPAddress       10.0.5/24
       GrParent    IPv4 IPAddress       <inherit>
       Parent      IPv4 IPAddress       <inherit>
       Child       IPv4 IPAddress       10.0.4/24

       +
       GrGrParent  IPv4 IPAddress       10.0.0/22
       GrParent    IPv4 IPAddress       <inherit>
       Parent      IPv4 IPAddress       <inherit>
       Child       IPv4 IPAddress       10.0.0/24

       << Charlie: Take a positive and negative IPv6 test case; do the same. >>

  6.4 Empty IP extension or AS extension.

       Cases:

       +
       Certificate with empty AS Resources extension; no IP Resources extension.

       +
       Certificate with empty IP Resources extension; no AS Resources extension.

       << Charlie: Stay tuned.  The Resource Certificate Profile might
       get revised to turn these into negative test cases. >>

  6.5 Missing IP extension and/or AS extension (2 positive, 1 negative case).

       Cases:

       +
       Certificate with AS Resources extension but no IP Resources extension.

       +
       Certificate with IP Resources extension but no AS Resources extension.

       -
       Certificate with neither AS nor IP Resources extension.

  6.6 Prohibition of rdi resource type (2 negative cases).

       Cases:

       -
       Certificate with AS Resources, that possesses both asnum and
       rdi ASIdentifiers.

       -
       Certificate with AS Resources, that possesses no asnum
       ASIdentifier but does have the rdi ASIdentifier.



AS Number Test Cases
--------------------

1. Tests for encoding order of ASIdOrRange sequence elements (4
   positive, 4 negative cases)

   Generate certificates by appending to C*:
   first ASIdOrRange sequence element is an {id/range} (I or R),
   next ASIdOrRange sequence element is an {id/range} (I or R),
   and the sequence elements are {correctly/incorrectly} ordered (C or X).

   Cases:

   +   IIC
   ASId       1234
   ASId      65537

   -   IIX
   ASId      65537
   ASId       1234

   +   IRC
   ASId      65537
   ASRange   65539 - 65540

   -   IRX
   ASId      65542
   ASRange   65539 - 65540

   +   RIC
   ASRange   65539 - 65540
   ASId      65542

   -   RIX
   ASRange   65539 - 65540
   ASId      65537

   +   RRC
   ASRange   65536 - 65537
   ASRange   65539 - 65540

   -   RRX
   ASRange   65539 - 65540
   ASRange   65536 - 65537


2. Tests for adjacent sequence elements (4 negative cases)

   Generate certificates by appending to C*:
   first ASIdOrRange sequence element is an {id/range} (I or R),
   next ASIdOrRange sequence element is an {id/range} (I or R),
   and the sequence elements are adjacent in address space.

   Cases:

   -  II
   ASId      65542
   ASId      65543

   -  IR
   ASId      65538
   ASRange   65539 - 65540

   -  RI
   ASRange   65539 - 65540
   ASId      65541

   -  RR
   ASRange   65539 - 65540
   ASRange   65541 - 65542


3. Tests for overlapping sequence elements (4 negative cases)

   Generate certificates by appending to C*:
   first ASIdOrRange sequence element is an {id/range} (I or R),
   next ASIdOrRange sequence element is an {id/range} (I or R),
   and the sequence elements overlap by one address.

   Cases:

   -  II
   ASId      65542
   ASId      65542

   -  IR
   ASId      65539
   ASRange   65539 - 65540

   -  RI
   ASRange   65539 - 65540
   ASId      65540

   - RR
   ASRange   65539 - 65540
   ASRange   65540 - 65542


4. Tests for child within parent limits (9 positive, 15 negative cases)

   Generate certificates by appending to C* and P* where
   parent has ASIdOrRange sequence element {id/range} (I or R),
   child  has ASIdOrRange sequence element {id/range} (I or R),
   child low limit is {less than/equal to/greater than} parent low limit
      (L, G or E),
   child high limit is {less than/equal to/greater than} parent high limit
      (L, G or E).

   Note that some cases are degenerate, so they are omitted.

   Cases:

   - IIL
   Parent ASId      10
   Child  ASId       9

   + IIE
   Parent ASId      10
   Child  ASId      10

   - IIG
   Parent ASId      10
   Child  ASId      11

   -  RIL
   Parent ASRange   10 - 20
   Child  ASId       9

   +  RIE
   Parent ASRange   10 - 20
   Child  ASId      10

   + RIGL
   Parent ASRange   10 - 20
   Child  ASId      11

   + RIGL
   Parent ASRange   10 - 20
   Child  ASId      19

   + RIGE
   Parent ASRange   10 - 20
   Child  ASId      20

   - RIGG
   Parent ASRange   10 - 20
   Child  ASId      21

   - IRLL
   Parent ASId      20
   Child  ASRange   10 - 19

   - IRLE
   Parent ASId      20
   Child  ASRange   10 - 20

   - IRLG
   Parent ASId      20
   Child  ASRange   10 - 21

   - IRLG
   Parent ASId      20
   Child  ASRange   19 - 30

   - IREG
   Parent ASId      20
   Child  ASRange   20 - 30

   - IRGG
   Parent ASId      20
   Child  ASRange   21 - 30

   - RRLL
   Parent ASRange   20 - 30
   Child  ASRange   19 - 29

   - RRLE
   Parent ASRange   20 - 30
   Child  ASRange   19 - 30

   - RRLG
   Parent ASRange   20 - 30
   Child  ASRange   19 - 31

   + RREL
   Parent ASRange   20 - 30
   Child  ASRange   20 - 29

   + RREE
   Parent ASRange   20 - 30
   Child  ASRange   20 - 30

   - RREG
   Parent ASRange   20 - 30
   Child  ASRange   20 - 31

   + RRGL
   Parent ASRange   20 - 30
   Child  ASRange   21 - 29

   + RRGE
   Parent ASRange   20 - 30
   Child  ASRange   21 - 30

   - RRGG
   Parent ASRange   20 - 30
   Child  ASRange   21 - 31
