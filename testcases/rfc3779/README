#####################################
Test cases for RFC 3779 extensions
by Charlie Gardiner and Andrew Chi
#####################################

The following test cases are designed to verify the handling of RFC
3779 extensions for X.509 certificates, under the restrictions defined
by the Resource Certificate Profile (draft-ietf-sidr-res-certs-18).
Comprehensive coverage of all possible valid and invalid certificates
is infeasible.  Nevertheless, the following cases check (1) each
requirement in the RFC, and (2) corner cases that may reveal common
software errors.

All test cases are variations of two well-formed "base" certificates:
a parent (P*) and child (C*) with correct RFC3779 relationships.  P*
and C* both contain multiple IPv4 and IPv6 IPaddressOrRange sequence
elements, and multiple AS numbers.  Unless otherwise specified, the
RFC3779 extensions of each certificate below are a superset of the
RFC3779 extensions in either P* or C*.  This helps to verify both the
independence and the correct combination of behavior when handling
IPv4, IPv6, and AS number fields.


Base Certificates
-----------------

P*: The "base" parent certificate contains the following RFC3779 fields.

IPv4 IPAddress        8.0/16
IPv4 IPAddress        8.2/16
IPv4 IPAddressRange   9.2.3.4 - 9.2.5.255
IPv6 IPAddress        1111::/16
IPv6 IPAddressRange   AAA1:: - AAA3::
ASId                  1234
ASRange               1236-1242


C*: The "base" child certificate contains the following RFC3779 fields.

IPv4 IPAddress        8.0.0/24
IPv4 IPAddressRange   9.2.3.4 - 9.2.3.8
IPv4 IPAddressRange   9.2.4.4 - 9.2.4.8
IPv6 IPAddress        1111:1111::/32
IPv6 IPAddressRange   AAA1:: - AAA2::
ASId                  1236
ASRange               1238-1239
ASRange               1241-1242


IPv4 / IPv6 Test Cases
----------------------

1. Tests for encoding order of IPaddressOrRange sequence elements (8
   positive, 8 negative cases):

   Generate certificates by appending to C*:
   first {IPv4/IPv6} sequence element is a {prefix/range},
   next sequence element is a {prefix/range},
   and the sequence elements are {correctly/incorrectly} ordered.

   Cases:

   +
   IPv4 IPAddress        10.0.0/24
   IPv4 IPAddress        10.0.2/24

   -
   IPv4 IPAddress        10.0.2/24
   IPv4 IPAddress        10.0.0/24

   +
   IPv4 IPAddress        10.0.0/24
   IPv4 IPAddressRange   10.2.4.4 - 10.2.4.8

   -
   IPv4 IPAddressRange   10.2.4.4 - 10.2.4.8
   IPv4 IPAddress        10.0.0/24

   +
   IPv4 IPAddressRange   10.2.4.4 - 10.2.4.8
   IPv4 IPAddress        10.3.0/24

   -
   IPv4 IPAddress        10.3.0/24
   IPv4 IPAddressRange   10.2.4.4 - 10.2.4.8

   +
   IPv4 IPAddressRange   10.2.3.4 - 10.2.3.8
   IPv4 IPAddressRange   10.2.4.4 - 10.2.4.8

   -
   IPv4 IPAddressRange   10.2.4.4 - 10.2.4.8
   IPv4 IPAddressRange   10.2.3.4 - 10.2.3.8

   +
   IPv6 IPAddress        2222::/16
   IPv6 IPAddress        2224::/16

   -
   IPv6 IPAddress        2224::/16
   IPv6 IPAddress        2222::/16

   +
   IPv6 IPAddress        2222::/16
   IPv6 IPAddressRange   3333:: - 3334::

   -
   IPv6 IPAddressRange   3333:: - 3334::
   IPv6 IPAddress        2222::/16

   +
   IPv6 IPAddressRange   2222:: - 2223::
   IPv6 IPAddress        3333::/16

   -
   IPv6 IPAddress        3333::/16
   IPv6 IPAddressRange   2222:: - 2223::

   +
   IPv6 IPAddressRange   2222:: - 2223::
   IPv6 IPAddressRange   3333:: - 3334::

   -
   IPv6 IPAddressRange   3333:: - 3334::
   IPv6 IPAddressRange   2222:: - 2223::


2. Tests for adjacent sequence elements (8 negative cases)

   Generate certificates by appending to C*:
   first {IPv4/IPv6} sequence element is a {prefix/range},
   next sequence element is a {prefix/range},
   and the sequence elements are adjacent in address space.

   Cases:

   -
   IPv4 IPAddress        10.0.0/24
   IPv4 IPAddress        10.0.1/24

   -
   IPv4 IPAddress        10.0.0/24
   IPv4 IPAddressRange   10.0.1.0 - 10.0.1.2

   -
   IPv4 IPAddressRange   10.0.0.253 - 10.0.0.255
   IPv4 IPAddress        10.0.1/24

   -
   IPv4 IPAddressRange   10.0.0.253 - 10.0.0.255
   IPv4 IPAddressRange   10.0.1.0 - 10.0.1.2

   -
   IPv6 IPAddress        2222::/16
   IPv6 IPAddress        2223::/16

   -
   IPv6 IPAddress        2222::/16
   IPv6 IPAddressRange   2223:: - 2223::0002

   -
   IPv6 IPAddressRange   2222::1 - 2222::ffff
   IPv6 IPAddress        2222:0:0:0:0:0:1/112

   -
   IPv6 IPAddressRange   2222:: - 2222::2
   IPv6 IPAddressRange   2222::3 - 2222::5

3. Tests for overlapping sequence elements (8 negative cases)

   Generate certificates by appending to C*:
   first {IPv4/IPv6} sequence element is a {prefix/range},
   next sequence element is a {prefix/range},
   and the sequence elements overlap by one address.

   Cases:

   -
   IPv4 IPAddress        10.0.0/24
   IPv4 IPAddress        10.0.0.255/32

   -
   IPv4 IPAddress        10.0.0/24
   IPv4 IPAddressRange   10.0.0.255 - 10.0.1.1

   -
   IPv4 IPAddressRange   10.0.0.254 - 10.0.1.0
   IPv4 IPAddress        10.0.1/24

   -
   IPv4 IPAddressRange   10.0.0.254 - 10.0.1.0
   IPv4 IPAddressRange   10.0.1.0 - 10.0.1.2

   -
   IPv6 IPAddress        2222::/128
   IPv6 IPAddress        2222::/16

   -
   IPv6 IPAddress        2222::/16
   IPv6 IPAddressRange   2222:ffff:ffff:ffff:ffff:ffff:ffff:ffff - 2223::1

   -
   IPv6 IPAddressRange   2222:: - 2223::
   IPv6 IPAddress        2223::/16

   -
   IPv6 IPAddressRange   2222:: - 2223::
   IPv6 IPAddressRange   2223:: - 2223::2

4. Tests for child within parent limits (28 positive, 44 negative cases)

   Generate certificates by appending to C* and P* where
   the following sequence elements are {IPv4/IPv6},
   parent has sequence element {prefix/range},
   child  has sequence element {prefix/range},
   child low limit is {less than/equal to/greater than} parent low limit,
   child high limit is {less than/equal to/greater than} parent high limit.

   Cases:

   -
   Parent IPv4 IPAddress       10.0.5/24
   Child  IPv4 IPAddress       10.0.4/24

   -
   Parent IPv4 IPAddress       10.0.5/24
   Child  IPv4 IPAddress       10.0.4/23

   -
   Parent IPv4 IPAddress       10.0.5/24
   Child  IPv4 IPAddress       10.0.0/21

   +
   Parent IPv4 IPAddress       10.0.0/22
   Child  IPv4 IPAddress       10.0.0/24

   +
   Parent IPv4 IPAddress       10.0.0/22
   Child  IPv4 IPAddress       10.0.0/22
   
   -
   Parent IPv4 IPAddress       10.0.0/22
   Child  IPv4 IPAddress       10.0.0/20

   +
   Parent IPv4 IPAddress       10.0.0/24
   Child  IPv4 IPAddress       10.0.0.128/26

   +
   Parent IPv4 IPAddress       10.0.0/24
   Child  IPv4 IPAddress       10.0.0.128/25

   -
   Parent IPv4 IPAddress       10.0.0/24
   Child  IPv4 IPAddress       10.0.1/24

   -
   Parent IPv4 IPAddress       10.0.5/24
   Child  IPv4 IPAddressRange  10.0.4.1 - 10.0.4.255
   
   -
   Parent IPv4 IPAddress       10.0.5/24
   Child  IPv4 IPAddressRange  10.0.4.255 - 10.0.5.255

   -
   Parent IPv4 IPAddress       10.0.5/24
   Child  IPv4 IPAddressRange  10.0.4.255 - 10.0.6.0
   
   +
   Parent IPv4 IPAddress       10.0.5/24
   Child  IPv4 IPAddressRange  10.0.5.0 - 10.0.5.5

   -
   Parent IPv4 IPAddress       10.0.5/24
   Child  IPv4 IPAddressRange  10.0.5.0 - 10.0.5.255  (invalid: range = prefix)

   -
   Parent IPv4 IPAddress       10.0.5/24
   Child  IPv4 IPAddressRange  10.0.5.0 - 10.0.6.0

   +
   Parent IPv4 IPAddress       10.0.5/24
   Child  IPv4 IPAddressRange  10.0.5.1 - 10.0.5.5
   
   +
   Parent IPv4 IPAddress       10.0.5/24
   Child  IPv4 IPAddressRange  10.0.5.1 - 10.0.5.255
   
   -
   Parent IPv4 IPAddress       10.0.5/24
   Child  IPv4 IPAddressRange  10.0.5.1 - 10.0.6.0

   -
   Parent IPv4 IPAddressRange  10.0.5.1 - 10.0.5.255
   Child  IPv4 IPAddress       10.0.4/24
   
   -
   Parent IPv4 IPAddressRange  10.0.5.1 - 10.0.5.255
   Child  IPv4 IPAddress       10.0.4/23

   -
   Parent IPv4 IPAddressRange  10.0.5.1 - 10.0.5.255
   Child  IPv4 IPAddress       10.0.4/22

   +
   Parent IPv4 IPAddressRange  10.0.5.0 - 10.0.5.254
   Child  IPv4 IPAddress       10.0.5/25

   -
   Parent IPv4 IPAddressRange  10.0.5.0 - 10.0.5.255 (invalid: range = prefix)
   Child  IPv4 IPAddress       10.0.5/24

   -
   Parent IPv4 IPAddressRange  10.0.5.0 - 10.0.5.254
   Child  IPv4 IPAddress       10.0.5/24

   +
   Parent IPv4 IPAddressRange  10.0.4.255 - 10.0.5.255
   Child  IPv4 IPAddress       10.0.5/25
   
   +
   Parent IPv4 IPAddressRange  10.0.4.255 - 10.0.5.255
   Child  IPv4 IPAddress       10.0.5/24

   -
   Parent IPv4 IPAddressRange  10.0.4.255 - 10.0.5.255
   Child  IPv4 IPAddress       10.0.5/23

   -
   Parent IPv4 IPAddressRange  10.0.4.1 - 10.0.4.10
   Child  IPv4 IPAddressRange  10.0.4.0 - 10.0.4.9

   -
   Parent IPv4 IPAddressRange  10.0.4.1 - 10.0.4.10
   Child  IPv4 IPAddressRange  10.0.4.0 - 10.0.4.10

   -
   Parent IPv4 IPAddressRange  10.0.4.1 - 10.0.4.10
   Child  IPv4 IPAddressRange  10.0.4.0 - 10.0.4.11

   +
   Parent IPv4 IPAddressRange  10.0.4.1 - 10.0.4.10
   Child  IPv4 IPAddressRange  10.0.4.1 - 10.0.4.9

   +
   Parent IPv4 IPAddressRange  10.0.4.1 - 10.0.4.10
   Child  IPv4 IPAddressRange  10.0.4.1 - 10.0.4.10

   -
   Parent IPv4 IPAddressRange  10.0.4.1 - 10.0.4.10
   Child  IPv4 IPAddressRange  10.0.4.1 - 10.0.4.11

   -
   Parent IPv4 IPAddressRange  10.0.4.1 - 10.0.4.10
   Child  IPv4 IPAddressRange  10.0.4.2 - 10.0.4.9

   +
   Parent IPv4 IPAddressRange  10.0.4.1 - 10.0.4.10
   Child  IPv4 IPAddressRange  10.0.4.2 - 10.0.4.10

   +
   Parent IPv4 IPAddressRange  10.0.4.1 - 10.0.4.10
   Child  IPv4 IPAddressRange  10.0.4.2 - 10.0.4.11

5. Parent-child multi-member tests: none.  This was deemed unnecessary
   by A. Chi because all certificates above are built from "base"
   certificates with multiple members.  If the above tests pass, we
   have already exercised multi-member functionality.

6. Special tests

  6.1 Valid/invalid ranges

     6.1.1 Extra zero bits in low limit  (2 negative cases)

       Generate certificates by appending to C*:
       {IPv4/IPv6} address range where the lower limit is encoded with
       least significant zero bits.

       Cases:

       -
       IPv4 IPAddressRange 5.0.0.0 - 5.1.2.3 where the lower limit is
       encoded by the bit string 000001010.
 
       -
       IPv6 IPAddressRange FF00:: - FFFE::0010  where the lower
       limit is encoded by the bit string 111111110.

     6.1.2 Extra/missing one bits in upper limit (2 positive, 4 negative cases)

       Generate certificates by appending to C*:
       {IPv4/IPv6} address range where the lower limit is encoded with
       {zero/one/several} least-significant 1 bits.

       Cases:

       -
       IPv4 IPAddressRange 5.0.0.1 - 5.255.255.255 where the upper limit is
       encoded by the bit string 00000.
     
       +
       IPv4 IPAddressRange 5.0.0.1 - 5.255.255.255 where the upper limit is
       encoded by the bit string 000001.
 
       -
       IPv4 IPAddressRange 5.0.0.1 - 5.255.255.255 where the upper limit is
       encoded by the bit string 0000011.
     
       -
       IPv6 IPAddressRange 5::1 - 5:ffff:ffff:ffff:ffff:ffff:ffff:ffff
       where the upper limit is encoded by the bit string 0000000000000.
     
       +
       IPv6 IPAddressRange 5::1 - 5:ffff:ffff:ffff:ffff:ffff:ffff:ffff
       where the upper limit is encoded by the bit string 00000000000001.

       -
       IPv6 IPAddressRange 5::1 - 5:ffff:ffff:ffff:ffff:ffff:ffff:ffff
       where the upper limit is encoded by the bit string 000000000000011.
     
     6.1.3 Invalid range due to equivalence to prefix (4 negative cases)

       Cases:

       -
       IPv4 IPAddressRange 1.0.0.0 - 1.0.0.0
     
       -
       IPv4 IPAddressRange 1.0.0.0 - 1.0.255.255

       -
       IPv6 IPAddressRange 100:: - 100::
     
       -
       IPv6 IPAddressRange 100:: - 100:ffff:ffff:ffff:ffff:ffff:ffff:ffff

     6.1.4 Invalid range due to out-of-order limits (2 negative cases)

       Cases:

       -
       IPv4 IPAddressRange 1.1.0.0 - 1.0.0.0

       -
       IPv6 IPAddressRange 2:: - 1::

  6.2 Valid/invalid prefixes (4 positive, 2 negative cases)

       Cases:

       +
       IPv4 IPAddress      0/0
       
       +
       IPv4 IPAddress      0/32

       -
       IPv4 IPAddress      8/33
       
       +
       IPv6 IPAddress      0::/0
       
       +
       IPv6 IPAddress      0::/128

       -
       IPv6 IPAddress      8::/129

  6.3 "Inherit" capability (2 positive, 2 negative cases)

       Cases:

       -
       GrGrParent  IPv4 IPAddress       10.0.5/24
       GrParent    IPv4 IPAddress       <inherit>
       Parent      IPv4 IPAddress       <inherit>
       Child       IPv4 IPAddress       10.0.4/24

       +
       GrGrParent  IPv4 IPAddress       10.0.0/22
       GrParent    IPv4 IPAddress       <inherit>
       Parent      IPv4 IPAddress       <inherit>
       Child       IPv4 IPAddress       10.0.0/24

       << CHARLIE: Take a positive and negative IPv6 test case; do the same. >>

  6.4 Empty IP extension or AS extension.

       Cases:

       +
       Certificate with empty AS Resources extension; no IP Resources extension.

       +
       Certificate with empty IP Resources extension; no AS Resources extension.

       << CHARLIE: Stay tuned.  The Resource Certificate Profile might
       get revised to turn these into negative test cases. >>

  6.5 Missing IP extension and/or AS extension (2 positive, 1 negative case).

       Cases:

       +
       Certificate with AS Resources extension but no IP Resources extension.
       
       +
       Certificate with IP Resources extension but no AS Resources extension.
       
       -
       Certificate with neither AS nor IP Resources extension.
       
  6.6 Prohibition of rdi resource type (2 negative cases).

       Cases:

       -
       Certificate with AS Resources, that possesses both asnum and
       rdi ASIdentifiers.

       -
       Certificate with AS Resources, that possesses no asnum
       ASIdentifier but does have the rdi ASIdentifier.


       
AS Number Test Cases
--------------------

